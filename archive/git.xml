<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY git-root "&kernel-dl;/software/scm/git" >

  <!ENTITY git-download-http "&git-root;/git-&git-version;.tar.xz">
  <!ENTITY git-download-ftp  " ">
]>

<sect1 id="git" xreflabel="git-&git-version;">
  <?dbhtml filename="git.html"?>

  <title>Git-&git-version;</title>

  <indexterm zone="git">
    <primary sortas="a-Git">Git</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til Git</title>

    <para>
      <application>Git</application> er et gratis og åpen kildekode, distribuert 
      versjonskontrollsystem designet for å håndtere alt fra små til svært store 
      prosjekter med hastighet og effektivitet. Hver
      <application>Git</application> klone er et fullverdig arkiv med 
      komplett historikk og full revisjonssporingsfunksjonalitet, ikke avhengig 
      av nettverkstilgang eller en sentral server. Forgrening og sammenslåing er raskt og 
      enkelt å gjøre. <application>Git</application> brukes til versjonskontroll av 
      filer, omtrent som verktøy som <application>Mercurial</application>,
      <application>Bazaar</application>, <application>Subversion</application>,
      <ulink url="https://www.nongnu.org/cvs/">CVS</ulink>,
      <application>Perforce</application>, og
      <application>Team Foundation Server</application>.
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&git-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&git-download-ftp;"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Ytterligere nedlastinger</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          <ulink url="&git-root;/git-manpages-&git-version;.tar.xz">
          &git-root;/git-manpages-&git-version;.tar.xz</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
          <ulink url="&git-root;/git-htmldocs-&git-version;.tar.xz">
          &git-root;/git-htmldocs-&git-version;.tar.xz</ulink>
          og andre dokumenter
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Git Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Anbefalt</bridgehead>
    <para role="recommended">
      <xref linkend="curl"/> (påkrevd for å bruke <application>Git</application> over
      http, https, ftp eller ftps)
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Installasjon av Git</title>

    <para>
      Installer <application>Git</application> ved å kjøre følgende 
      kommandoer:
    </para>

<screen><userinput>./configure --prefix=/usr \
            --with-gitconfig=/etc/gitconfig \
            --with-python=python3 &amp;&amp;
make</userinput></screen>

<!--
    <para>
    <para>
      Testpakken kan kjøres i parallellmodus. For å kjøre testpakken, utfør:
      <command>make test -k |&amp; tee test.log</command>.  Hvis noen tester 
      mislykkes, kan listen over ikke beståtte tester vises via
      <command>grep '^not ok' test.log | grep -v TODO</command>.
      <!- - It looks like I'd misdiagnosed the issue.  - ->
      <!- -phrase revision='systemd'>En test ved navn <literal>start and stop
      Linux/systemd maintenance</literal> er kjent for å mislykkes hvis den nåværende 
      påloggingsøkten ikke startes etter gjenoppbygging av
      <xref linkend='systemd'/> med <xref linkend='linux-pam'/>
      støtte, eller det er en SSH økt, men SSH serveren er ikke konfigurert 
      med <option>UsePAM</option> aktivert.</phrase- ->
    </para>
-->

    <para>
      Nå, som <systemitem class="username">root</systemitem>
      bruker:
    </para>

<screen role="root"><userinput>make perllibdir=/usr/lib/perl5/&lfs-perl-version;/site_perl install</userinput></screen>

    <bridgehead renderas="sect3">Hvis du lastet ned manualsidene og/eller HTML dokumentasjonen</bridgehead>

    <para>
      Hvis du lastet ned manualsidene, untar dem som
      <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>tar -xf ../git-manpages-&git-version;.tar.xz \
    -C /usr/share/man --no-same-owner --no-overwrite-dir</userinput></screen>

    <para>
      Hvis du lastet ned html dokumentene, untar dem som
      <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>mkdir -vp   /usr/share/doc/git-&git-version; &amp;&amp;
tar   -xf   ../git-htmldocs-&git-version;.tar.xz \
      -C    /usr/share/doc/git-&git-version; --no-same-owner --no-overwrite-dir &amp;&amp;

find        /usr/share/doc/git-&git-version; -type d -exec chmod 755 {} \; &amp;&amp;
find        /usr/share/doc/git-&git-version; -type f -exec chmod 644 {} \;</userinput></screen>

<!-- ==== Reorganize docs ====== -->
    <bridgehead renderas="sect3">Omorganiser tekst og html i html dokumentasjonen</bridgehead>

    <para>
      Html dokumentene inneholder mange rene tekstfiler. 
      Omorganiser filene som
      <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>mkdir -vp /usr/share/doc/git-&git-version;/man-pages/{html,text}         &amp;&amp;
mv        /usr/share/doc/git-&git-version;/{git*.adoc,man-pages/text}     &amp;&amp;
mv        /usr/share/doc/git-&git-version;/{git*.,index.,man-pages/}html &amp;&amp;

mkdir -vp /usr/share/doc/git-&git-version;/technical/{html,text}         &amp;&amp;
mv        /usr/share/doc/git-&git-version;/technical/{*.adoc,text}        &amp;&amp;
mv        /usr/share/doc/git-&git-version;/technical/{*.,}html           &amp;&amp;

mkdir -vp /usr/share/doc/git-&git-version;/howto/{html,text}             &amp;&amp;
mv        /usr/share/doc/git-&git-version;/howto/{*.adoc,text}            &amp;&amp;
mv        /usr/share/doc/git-&git-version;/howto/{*.,}html               &amp;&amp;

sed -i '/^&lt;a href=/s|howto/|&amp;html/|' /usr/share/doc/git-&git-version;/howto-index.html &amp;&amp;
sed -i '/^\* link:/s|howto/|&amp;html/|' /usr/share/doc/git-&git-version;/howto-index.adoc</userinput></screen>

  </sect2>

  <sect2>
    <title>Bruke Git</title>

    <para>
      Denne Git installasjonen har ikke all den kraften Git kan tilby, som for eksempel 
      planlegging og lignende. Hvis du vil ha enda flere funksjoner, sjekk
      <ulink url="&blfs-svn;/general/git.html"/>. Men, denne installasjonen 
      hvis du installerte <xref linkend="curl"/> kan tilby nok funksjoner til 
      å være nyttige for deg, for eksempel muligheten til å klone repositorier. Dette er 
      noen ganger en nødvendighet når utviklere ikke publiserer utgivelser eller ikke har gjort 
      det på lenge, så repositoriet er den eneste måten å få tak i den (forhåpentligvis) oppdaterte 
      pakken. For å klone et repositori, bare bruk:
    </para>

    <screen><userinput>git clone https://sti/til/repo.git</userinput></screen>

    <para>
      Kommandoen ovenfor vil da klone hele depotet foruten 
      delprosjekter, noe noen prosjekter gjør og krever spesielle instruksjoner. 
      En mappe vil bli opprettet, kalt <filename>repo</filename>, i gjeldende 
      arbeidsmappe, med alle filene til repoet i den nettopp opprettede 
      mappen. Hvis du av en eller annen grunn vil endre mappenavnet, kan du 
      gjøre det når du kloner repoet, slik som dette:
    </para>

<screen><userinput>git clone https://sti/til/repo.git nyttnavn</userinput></screen>

    <para>
      Kommandoen ovenfor vil opprette mappen kalt <filename>nyttnavn
      </filename> og legg alle filene til repositoriet i den mappen. Etter hvert 
      vil du komme over et repositorium som har noen delprosjekter, for eksempel 
      en emulator som er avhengig av grafikkbiblioteker og har til hensikt å kompilere en 
      statisk versjon av det. For å hente inn disse delprosjektene må du også 
      påkalle <parameter>--recurse-submodules</parameter> alternativ. Dette vil 
      klone alle delprosjektene og sjekke dem ut.
    </para>

  </sect2>

  <sect2>
    <title>Git Repo vs Release Archives</title>

    <para>
      Det meste av den pakkede kildekoden i GLFS er pakket i 
      tarballer eller zipfiler. Disse tarballene og zipfilene ble opprettet 
      som en del av en utgivelse, og inkluderer ofte filer som ikke finnes i repo 
      ekvivalenten der pakkeutviklingen skjer. Vanligvis er de ekstra 
      inkluderte filene konfigurasjonsskriptene du nå burde være vant til å bruke. 
      De genereres manuelt ved hjelp av <command>aclocal</command>,
      <command>autoconf</command>, og <command>automake</command>. 
      configure skript er ofte ikke i repoene, så hvis git repoet blir klonet, 
      må du generere configure skriptet selv, hvis du 
      finner <filename>configure.ac</filename>, <filename>Makefile.am</filename>,
      og muligens <filename>autogen.sh</filename>. Du trenger ikke å gjøre dette 
      hvis du finner ut at depotet har en <filename>Makefile</filename>,
      <filename>meson_options.txt</filename>, eller
      <filename>CMakeLists.txt</filename>.
    </para>

    <para>
      En annen stor forskjell mellom repoet og utgivelsespakken er at 
      repoet sannsynligvis har hatt commits etter den siste utgivelsen hvis det hadde noen, 
      og nye commits kan introdusere feil eller forhindre kompilering. Når utviklere 
      forbereder en ny utgivelse, søker de ofte etter problemer, feil og kompileringsfeil, 
      slik at den blir stabil før de publiserer utgivelsen og dens relaterte 
      pakkefiler. Utgivelsespakker er ikke helt trygge for problemer og kan 
      bidra til å forårsake problemer ettersom filer kan legges til. Noen ganger kan du se 
      om noe er galt, noen ganger ikke. Det er alltid viktig å være oppdatert med 
      sikkerhetsnyheter for å forhindre skade.
    </para>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

    &options-configure;

    <para>
      <parameter>--with-gitconfig=/etc/gitconfig</parameter>: Dette setter
      <filename>/etc/gitconfig</filename> som filen som lagrer
      standard, systemomfattende, <application>Git</application>
      innstillinger.
    </para>

    <para>
      <parameter>--with-python=python3</parameter>: Bruk denne bryteren for å bruke
      <application>Python 3</application>, i stedet for EOL-en
      <application>Python 2</application>. Python brukes til
      <command>git p4</command> grensesnitt til Perforce repositorier, 
      og også brukt i noen tester.
    </para>

<!--
    <para>
      <option>- -with-libpcre2</option>: Bruk denne bryteren hvis
      <application>PCRE2</application> er installert.
    </para>
-->

    <para>
      <command>tar -xf ../git-manpages-&git-version;.tar.gz -C
      /usr/share/man --no-same-owner</command>: Dette untarer
      <filename>git-manpages-&git-version;.tar.gz</filename>. The
      <option>-C</option> alternativet gjør at tar endrer mappen til
      <filename class="directory">/usr/share/man</filename> før
      den begynner å dekomprimere dokumentene. <option>--no-same-owner</option>
      alternativet hindrer tar i å bevare bruker- og gruppedetaljene i filene. 
      Dette er nyttig ettersom den brukeren eller gruppen kanskje ikke finnes på 
      systemet ditt; dette kan (potensielt) være en sikkerhetsrisiko.
    </para>

    <para>
      <command>mv /usr/share/doc/git-&git-version; ...</command>: Disse 
      kommandoene flytter noen av filene til undermapper for å gjøre det enklere å sortere 
      gjennom dokumentene og finne det du leter etter.
    </para>

    <para>
      <command>find ... chmod ...</command>: Disse kommandoene korrigerer 
      tillatelsene i den medfølgende dokumentasjonens tar fil.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Konfigurere Git</title>

    <sect3 id="git-config">
      <title>Konfigurasjonsfiler</title>
      <para>
        <filename>~/.gitconfig</filename> og
        <filename>/etc/gitconfig</filename>
      </para>

      <indexterm zone="git git-config">
        <primary sortas="e-AA.gitconfig">~/.gitconfig</primary>
      </indexterm>

      <indexterm zone="git git-config">
        <primary sortas="e-etc-gitconfig">/etc/gitconfig</primary>
      </indexterm>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>
          git, git-receive-pack, git-upload-archive, og
          git-upload-pack (hardlenket til 
		  hverandre), git-cvsserver, git-shell, gitk, og scalar
        </seg>
        <seg>
          Ingen
        </seg>
        <seg>
          /usr/libexec/git-core,
          /usr/lib/perl5/&lfs-perl-version;/site_perl/Git, og
          /usr/share/{doc/git-&git-version;,git-core,git-gui,gitk,gitweb}
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="git-prog">
        <term><command>git</command></term>
        <listitem>
          <para>
            er innholdssporeren
          </para>
          <indexterm zone="git git-prog">
            <primary sortas="b-git">git</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-cvsserver">
        <term><command>git-cvsserver</command></term>
        <listitem>
          <para>
            er en CVS serveremulator for <application>Git</application>
          </para>
          <indexterm zone="git git-cvsserver">
            <primary sortas="b-git-cvsserver">git-cvsserver</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gitk">
        <term><command>gitk</command></term>
        <listitem>
          <para>
            er en grafisk <application>Git</application> nettleser for arkivet
            (trenger <ulink url="&blfs-svn;/general/tk.html">Tk</ulink>)
          </para>
          <indexterm zone="git gitk">
            <primary sortas="b-gitk">gitk</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-receive-pack">
        <term><command>git-receive-pack</command></term>
        <listitem>
          <para>
            påkalles av <command>git send-pack</command> og oppdaterer 
            depotet med informasjonen som mates fra den eksterne enden
          </para>
          <indexterm zone="git git-receive-pack">
            <primary sortas="b-git-receive-pack">git-receive-pack</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-shell">
        <term><command>git-shell</command></term>
        <listitem>
          <para>
            er et innloggingsskall for SSH kontoer for å gi begrenset Git 
            tilgang
          </para>
          <indexterm zone="git git-shell">
            <primary sortas="b-git-shell">git-shell</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-upload-archive">
        <term><command>git-upload-archive</command></term>
        <listitem>
          <para>
            påkalles av <command>git archive --remote</command> og sender 
            et generert arkiv til den andre enden over git-protokollen
          </para>
          <indexterm zone="git git-upload-archive">
            <primary sortas="b-git-upload-archive">git-upload-archive</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="git-upload-pack">
        <term><command>git-upload-pack</command></term>
        <listitem>
          <para>
            påkalles av <command>git fetch-pack</command>, den oppdager 
            hvilke objekter den andre siden mangler, og sender dem etter 
            pakking
          </para>
          <indexterm zone="git git-upload-pack">
            <primary sortas="b-git-upload-pack">git-upload-pack</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="scalar">
        <term><command>scalar</command></term>
        <listitem>
          <para>
            er et verktøy for administrasjon av arkiver som optimaliserer Git for bruk i 
            store arkiver
          </para>
          <indexterm zone="git scalar">
            <primary sortas="b-scalar">scalar</primary>
          </indexterm>
        </listitem>
      </varlistentry>
    </variablelist>

  </sect2>

</sect1>
