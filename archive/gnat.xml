<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../../general.ent">
  %general-entities;

  <!ENTITY gnat-download-http "&gnu-http;/gcc/gcc-&gcc-version;/gcc-&gcc-version;.tar.xz">
  <!ENTITY gnat-download-ftp  " ">
]>

<sect1 id="gnat" xreflabel="GNAT-&gcc-version;">
  <?dbhtml filename="gnat.html"?>

  <title>GNAT-&gcc-version;</title>

  <indexterm zone="gnat">
    <primary sortas="a-gnat">gnat</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduksjon til GNAT</title>

    <para>
	<application>GNAT</application> er en del av
	<application>GCC</application>. Det kalles ofte
	GCC-Ada på grunn av dette. Ikke mange pakker er avhengige
	av <application>GNAT</application> bortsett fra
	<xref linkend="wine"/>, selv om noen pakker
	eventuelt er valgfritt avhengige av den.
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Nedlasting (HTTP): <ulink url="&gnat-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Nedlasting (FTP): <ulink url="&gnat-download-ftp;"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">GNAT Avhengigheter</bridgehead>

    <bridgehead renderas="sect4">Påkrevd</bridgehead>
    <para role="required">
	<xref linkend="gnat-binary"/>
    </para>

    <bridgehead renderas="sect4">Valgfri</bridgehead>
    <para role="optional">
      <ulink url="https://www.linuxfromscratch.org/blfs/view/svn/general/gdb.html">
      GDB</ulink>,
      <ulink url="&blfs-svn;/general/graphviz.html">Graphviz</ulink>
      (Noen tester bruker det hvis det er installert; merk at
      hvis det er installert, men ikke bygget med
      <xref role="nodep" linkend='libpng'/> vil disse testene mislykkes), og
      <ulink url="https://www.linuxfromscratch.org/blfs/view/svn/general/valgrind.html">
      Valgrind</ulink> (for tester)
    </para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
      href="../../../xincludes/long-build-time.xml"/>

  </sect2>

  <sect2 role="installation">
    <title>Installasjon av GNAT</title>

    <important>
      <para>
        Selv om du bare spesifiserer andre språk enn Ada, C og C++
        i ./configure kommandoen nedenfor, vil installasjonsprosessen
        overskrive dine eksisterende GCC C- og C++-kompilatorer og
        biblioteker. Det anbefales å kjøre hele pakken med tester.
      </para>
      
      <para>
        Ikke fortsett med <command>make install</command>
        kommandoen til du er sikker på at byggingen var vellykket.
        Du kan sammenligne testresultatene dine med de som finnes på
        <ulink url="https://gcc.gnu.org/ml/gcc-testresults/"/>.
        Du kan også se informasjonen i
        GCC delen av kapittel 8 i LFS boken
	(<ulink url="https://www.linuxfromscratch.org/~thomas/multilib-m32/chapter08/gcc.html"/>).
      </para>
    </important>

    <para>
      Instruksjonene nedenfor utfører bevisst en
      «bootstrap» prosess. Bootstrapping er nødvendig for robusthet
      og anbefales på det sterkeste når du oppgraderer kompilatorversjonen.
      For å deaktivere bootstrap uansett, legg til <parameter>--disable-bootstrap
      </parameter> til <command>../configure</command> alternativene nedenfor. 
    </para>

    <para>
      Først må du sørge for at riktig bibliotekmappe brukes på x86_64:
    </para>

<screen><userinput>case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

    <para>
      Opprett byggemappen og sjekk for multilib støtte:
    </para>

<screen><userinput>mkdir build &amp;&amp;
cd    build &amp;&amp;

if [[ $(uname -m) == "x86_64" ]]; then
    echo "int main(){}" > dummy.c &amp;&amp;
    if $(gcc -m32 dummy.c &amp;&gt; /dev/null); then
        MULTILIB="--enable-multilib"
        MULTILIB_FLAGS="--with-multilib-list=m64,m32"
        # This makes -mstackrealign the default for 32-bit objects
        sed '/STACK_REALIGN_DEFAULT/s/0/(!TARGET_64BIT \&amp;\&amp; TARGET_SSE)/' \
              -i ../gcc/config/i386/i386.h
        if $(gcc -mx32 dummy.c &amp;&gt; /dev/null); then
            MULTILIB_FLAGS+=",mx32"
        fi
    elif $(gcc -mx32 dummy.c &amp;&gt; /dev/null); then
        MULTILIB="--enable-multilib"
        MULTILIB_FLAGS="--with-multilib-list=m64,mx32"
    else
        MULTILIB="--disable-multilib"
    fi
    rm -v dummy.c
else
    MULTILIB="--disable-multilib"
fi</userinput></screen>

    <para>
      Nå installer <application>GNAT</application> ved å kjøre følgende
      kommandoer:
    </para>

<screen><userinput>../configure                  \
    --prefix=/usr             \
    $(echo "$MULTILIB")       \
    $(echo "$MULTILIB_FLAGS") \
    --with-system-zlib        \
    --enable-default-pie      \
    --enable-default-ssp      \
    --disable-fixincludes     \
    --enable-languages=ada,c,c++  &amp;&amp;
    unset MULTILIB MULTILIB_FLAGS &amp;&amp;

make</userinput></screen>

    <para>
      Hvis du kjører tester, som i LFS, fjern/rett flere kjente testfeil:
    </para>

<screen><userinput>sed -e '/cpython/d'               -i ../gcc/testsuite/gcc.dg/plugin/plugin.exp &amp;&amp;
sed -e 's/no-pic /&amp;-no-pie /'     -i ../gcc/testsuite/gcc.target/i386/pr113689-1.c &amp;&amp;
sed -e 's/300000/(1|300000)/'     -i ../libgomp/testsuite/libgomp.c-c++-common/pr109062.c &amp;&amp;
sed -e 's/{ target nonpic } //' \
    -e '/GOTPCREL/d'              -i ../gcc/testsuite/gcc.target/i386/fentryname3.c</userinput></screen>

    <para>
	Hvis du har installert tilleggspakker som f.eks.
	<application>valgrind</application> og <application>gdb
	</application>, <application>gcc</application> delen av
	testpakken vil kjøre flere tester enn i LFS. Noen av disse vil
	rapportere FAIL og andre XPASS (bestått når det forventes at det vil FAIL)).
	Fra gcc-&gcc-version;, omtrent 74 FAIL oppstår i “guality”
	pakken, samt diverse feil i resten av
	testpakken. Hvis alle kompilatorene ovenfor bygges, vil det være litt
	over 110 uventede feil av over 617 000 tester.
	For å kjøre testene, utsted:
    </para>

<screen><userinput>ulimit -s 32768 &amp;&amp;
make -k check</userinput></screen>

    <para>
	Testene er veldig lange, og resultatene kan være vanskelige å finne i
	loggene, spesielt hvis du bruker parallelle jobber med make. Du kan få et
	sammendrag av testene med:
    </para>

    <screen><userinput>../contrib/test_summary</userinput></screen>

    <para>
      Nå, som <systemitem class="username">root</systemitem> bruker:
    </para>

<screen role="root"><userinput>make install                                               &amp;&amp;
mkdir -pv /usr/share/gdb/auto-load/usr/lib                 &amp;&amp;
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib    &amp;&amp;

chown -v -R root:root \
    /usr/lib/gcc/*linux-gnu/&gcc-version;/include{,-fixed} \
    /usr/lib/gcc/*linux-gnu/&gcc-version;/ada{lib,include} &amp;&amp;

ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/&gcc-version;/liblto_plugin.so \
        /usr/lib/bfd-plugins/</userinput></screen>

  </sect2>

  <sect2>
    <title>Opprydding og testing</title>

    <para>
      Nå som <application>GNAT</application> er installert,
      Det er på tide å rydde opp og teste installasjonen for å forsikre
      deg om at alt fungerer som forventet.
    </para>

    <para>
      Fjern den binære installasjonen som ble installert tidligere
      som <systemitem class="username">root</systemitem> bruker:
    </para>

    <screen role="root"><userinput>rm -rf /opt/gnat*</userinput></screen>

    <para>
      Nå som vanlig bruker, gjenopprett <filename>PATH</filename>
      variabelen i forhold til hva den var tidligere:
    </para>

<screen><userinput>export PATH=$PATH_HOLD &amp;&amp;
unset PATH_HOLD</userinput></screen>

    <para>
      Nå er det på tide å teste installasjonen. Bekreft først at
      C og C++ kompilatorene fungerer som de skal:
    </para>

<screen><userinput>echo "int main(){}" >> main.c &amp;&amp;
cp -v main.c main.cpp &amp;&amp;
gcc main.c            &amp;&amp;
./a.out               &amp;&amp;

rm -v a.out           &amp;&amp;
g++ main.cpp          &amp;&amp;
./a.out               &amp;&amp;

rm -v a.out main.{c,cpp}</userinput></screen>

    <para>
	Hvis du bruker multilib:
    </para>

<screen><userinput>echo "int main(){}" >> main.c &amp;&amp;
cp -v main.c main.cpp &amp;&amp;
gcc -m32 main.c       &amp;&amp;
./a.out               &amp;&amp;

rm -v a.out           &amp;&amp;
g++ -m32 main.cpp     &amp;&amp;
./a.out               &amp;&amp;

rm -v a.out main.{c,cpp}</userinput></screen>

    <para>
      Og til slutt, test GNAT kompilatoren:
    </para>

<screen><userinput>cat &gt;&gt; testgnat.adb &lt;&lt; "EOF" &amp;&amp;
<literal>with Ada.Text_IO; use Ada.Text_IO;
procedure Testgnat is
begin
   Put_Line("Success!");
end Testgnat;</literal>
EOF

gnatmake testgnat.adb                    &amp;&amp;
./testgnat                               &amp;&amp;

rm -v testgnat*</userinput></screen>

    <para>
      Kommandoene ovenfor skal ikke ha noen feil, ellers
      gikk det noe galt med installasjonen.
    </para>

  </sect2>

  <sect2 role="commands">
    <title>Parameterforklaringer</title>

    <para>
      <command>mkdir build; cd build</command>: 
      <application>GCC</application> dokumentasjonen anbefaler
      at man bygger pakken i en dedikert byggemappe.
    </para>

    <para>
      <command>if [[ $(uname -m) == "x86_64" ]]; then...</command>: Disse
      kommandoene sjekker for multilib støtte.
    </para>

    <para>
      <command>$(echo "$MULTILIB{,_FLAGS}")</command>: Disse kommandoene sender
      resultatene fra kommandoene som er forklart ovenfor som parametere til
      <filename>../configure</filename> for å tillate automatisering av det som
      må settes for multilib støtte hvis aktuelt.
    </para>

    <para>
      <parameter>--with-system-zlib</parameter>: Bruker systemets
      <application>zlib</application> i stedet for den medfølgende.
      <application>zlib</application> brukes til komprimering
      og dekomprimering <application>GCC</application> sin mellomliggende
      språk i LTO (Link Time Optimization) objektfiler.
    </para>

    <para>
      <parameter>--enable-default-pie</parameter>: Gjør
      <option>-fpie</option> standardalternativet når du kompilerer programmer.
      Sammen med <xref linkend="gASLR"/> funksjonen aktivert i kjernen,
      bekjemper dette noen typer angrep basert på kjente minneoppsett.
    </para>

    <para>
      <parameter>--enable-default-ssp</parameter>: Gjør
      <option>-fstack-protector-strong</option> standardalternativet når du
      kompilerer programmer. <xref linkend="gSSP"/> er en teknikk som forhindrer
      endring av programflyten ved å ødelegge parameterstakken.
    </para>

    <para>
      <parameter>--enable-languages=ada,c,c++</parameter>:
      Denne kommandoen bygger støtte for ADA, C, og C++. Se på <ulink
      url="https://www.linuxfromscratch.org/blfs/view/svn/general/gcc.html"/>
      for å finne ut hvilke andre språk som støttes. Sørg for å legge til
      <parameter>ada</parameter> til alternativet hvis du rekompilerer <application>
      GCC</application>.
    </para>

    <para>
      <command>ulimit -s 32768</command>: Denne kommandoen hindrer at flere
      tester går tom for stabelplass.
    </para>

    <para>
      <command>make -k check</command>: Denne kommandoen kjører testpakken
      uten å stoppe hvis det oppstår feil.
    </para>

    <para>
      <command>../contrib/test_summary</command>: Denne kommandoen vil produsere
      et sammendrag av resultatene fra testpakken. Du kan legge til <command>| grep
      -A7 Summ</command> til kommandoen for å produsere en enda mer kondensert versjon av
      sammendraget. Du kan også omdirigere resultatet til en fil for gjennomgang
      og sammenligning senere.
    </para>

    <para>
      <command>mv -v /usr/lib/*gdb.py ...</command>: Installasjonsfasen
      legger inn noen filer som brukes av <application>gdb</application> under
      <filename class="directory">/usr/lib</filename> mappen. Dette genererer
      falske feilmeldinger når du utfører <command>ldconfig</command>. Denne
      kommandoen flytter filene til et annet sted.
    </para>

    <para>
      <command>chown -v -R root:root /usr/lib/gcc/*linux-gnu/...</command>:
      Hvis pakken er bygget av en annen bruker enn root, vil eierskapet til
      installerte <filename class="directory">include</filename> mappen (og
      innholdet) være feil. Denne kommandoen endrer eierskapet til
      <systemitem class="username">root</systemitem> bruker og gruppe.
    </para>

    <para>
      <option>--enable-host-shared --enable-languages=jit</option>:
      Bygger <systemitem class="library">libgccjit</systemitem>, et bibliotek
      for å bygge inn GCC i programmer og biblioteker for å generere
      maskinkode. Til tross for <quote>JIT</quote> (just-in-time) i navnet,
      kan biblioteket brukes til AOT (ahead-of-time) kompilering også.
      <option>--enable-host-shared</option> er nødvendig for å bygge
      <systemitem class="library">libgccjit</systemitem>, men det
      gjør GCC betydelig tregere. Så
      <systemitem class="library">libgccjit</systemitem> bør bygges og
      installeres separat, ikke som en del av <quote>hoved</quote> GCC
      installasjonen.  Hvis du trenger dette biblioteket, konfigurer GCC
      med disse to alternativene og installer biblioteket ved å kjøre
      <!-- from Arch, not tested -->
      <command>make -C gcc jit.install-common jit.install-info</command>
      som &root; bruker.  Dette biblioteket brukes ikke av noen BLFS pakke,
      og er heller ikke testet av BLFS utviklerne.
    </para>

  </sect2>

  <sect2 role="content">
    <title>Innhold</title>

    <segmentedlist>
      <segtitle>Installerte Programmer</segtitle>
      <segtitle>Installerte Biblioteker</segtitle>
      <segtitle>Installerte Mapper</segtitle>

      <seglistitem>
        <seg>
          gnat, gnatbind, gnatchop, gnatclean, gnatfind, gnatkr,
          gnatlink, gnatls, gnatmake, gnatname, gnatprep, gnatxref
        </seg>
        <seg>
          libgnarl.{so,a}, libgnat.{so,a} i <filename class="directory">
          /usr/lib/gcc/&lt;arch-triplet&gt;/&gcc-version;/adalib</filename>
        </seg>
        <seg>
          /usr/lib/gcc/&lt;arch-triplet&gt;/&gcc-version;/ada{include,lib}
          og /usr/lib/gcc/&lt;arch-triplet&gt;/&gcc-version;/plugin/include/ada
        </seg>
      </seglistitem>
    </segmentedlist>

    <para>
      Bare de Ada spesifikke filene er oppført her. Andre finner du på
      <ulink url="&lfs-website;/lfs/view/stable/chapter08/gcc.html#contents-gcc"/>
      slik de opprinnelig ble installert under byggingen av LFS.
    </para>

    <variablelist>
      <bridgehead renderas="sect3">Korte Beskrivelser</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="gnat-prog">
        <term><command>gnat</command></term>
        <listitem>
          <para>
            er en innpakning som aksepterer en rekke kommandoer og kaller
            det tilsvarende verktøyet fra listen nedenfor.
          </para>
          <indexterm zone="gnat gnat-prog">
            <primary sortas="b-gnat">gnat</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatbind">
        <term><command>gnatbind</command></term>
        <listitem>
          <para>
            brukes til å binde kompilerte objekter.
          </para>
          <indexterm zone="gnat gnatbind">
            <primary sortas="b-gnatbind">gnatbind</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatchop">
        <term><command>gnatchop</command></term>
        <listitem>
          <para>
            er nyttig for å gi filer nytt navn for å oppfylle standarden
            <application>Ada</application> standard filnavngivningskonvensjoner.
          </para>
          <indexterm zone="gnat gnatchop">
            <primary sortas="b-gnatchop">gnatchop</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatclean">
        <term><command>gnatclean</command></term>
        <listitem>
          <para>
            brukes til å fjerne filer tilknyttet et
            <application>GNAT</application> prosjekt.
          </para>
          <indexterm zone="gnat gnatclean">
            <primary sortas="b-gnatclean">gnatclean</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatfind">
        <term><command>gnatfind</command></term>
        <listitem>
          <para>
            er ment for å finne definisjoner og/eller referanser til
            spesifiserte enheter i et <application>GNAT</application> prosjekt.
          </para>
          <indexterm zone="gnat gnatfind">
            <primary sortas="b-gnatfind">gnatfind</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatkr">
        <term><command>gnatkr</command></term>
        <listitem>
          <para>
            brukes til å bestemme det komprimerte navnet for en gitt fil, når
            den komprimeres til en spesifisert maksimal lengde.
          </para>
          <indexterm zone="gnat gnatkr">
            <primary sortas="b-gnatkr">gnatkr</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatlink">
        <term><command>gnatlink</command></term>
        <listitem>
          <para>
            brukes til å koble sammen programmer og bygge en kjørbar fil.
          </para>
          <indexterm zone="gnat gnatlink">
            <primary sortas="b-gnatlink">gnatlink</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatls">
        <term><command>gnatls</command></term>
        <listitem>
          <para>
            er den kompilerte enhetsleseren.
          </para>
          <indexterm zone="gnat gnatls">
            <primary sortas="b-gnatls">gnatls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatmake">
        <term><command>gnatmake</command></term>
        <listitem>
          <para>
            er <application>Ada</application> kompilatoren,
            som utfører kompilering, binding og lenking.
          </para>
          <indexterm zone="gnat gnatmake">
            <primary sortas="b-gnatmake">gnatmake</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatname">
        <term><command>gnatname</command></term>
        <listitem>
          <para>
            vil liste opp filene som er knyttet til et
            <application>GNAT</application> prosjekt.
          </para>
          <indexterm zone="gnat gnatname">
            <primary sortas="b-gnatname">gnatname</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatprep">
        <term><command>gnatprep</command></term>
        <listitem>
          <para>
            er <application>GNAT</application> eksterne forprosessor.
          </para>
          <indexterm zone="gnat gnatprep">
            <primary sortas="b-gnatprep">gnatprep</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gnatxref">
        <term><command>gnatxref</command></term>
        <listitem>
          <para>
            er lik <command>gnatfind</command>, men genererer
            en fullstendig rapport over alle kryssreferanser.
          </para>
          <indexterm zone="gnat gnatxref">
            <primary sortas="b-gnatxref">gnatxref</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
