<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../../general.ent">
  %general-entities;

  <!ENTITY mingw-w64-binary-download-http "https://github.com/Zeckmathederg/mingw-w64-binary-builds/releases/download/mingw-w64-binary-gcc-&gcc-version;-mingw-&mingw-w64-version;/mingw-w64-gcc-&gcc-version;-mingw-&mingw-w64-version;.tar.xz">
  <!ENTITY mingw-w64-binary-download-ftp  " ">
  <!ENTITY mingw-w64-binary-md5sum        "3596109b369fc7d0ee091bdcb880e19f">
  <!ENTITY mingw-w64-binary-size          "206 MB">
  <!ENTITY mingw-w64-binary-buildsize     "1.3 GB">
]>

<sect1 id="mingw-w64-binary" xreflabel="Binary MinGW-w64">
  <?dbhtml filename="mingw-w64-binary.html"?>


  <title>Binary MinGW-w64</title>

  <indexterm zone="mingw-w64-binary">
    <primary sortas="a-mingw-w64-binary">gnat-binary</primary>
  </indexterm>

  <sect2 role="package">
    <title>About MinGW-w64</title>
    
    <para>
	MinGW-w64 is an advancement of the original mingw.org project,
	created to support the GCC compiler on Windows systems.
	It has forked it in 2007 in order to provide support for 64 bits
	and new APIs. It has since then gained widespread use and distribution.
    </para>

    <para>
	On Linux, it serves as a useful toolchain to compile code targeting
	Windows, resulting binaries can include .exe and .dll files.
	<xref linkend="wine"/> is a project that depends on <application>
	MinGW-W64</application> to compile .dll files. However in order
	to build this toolchain, the toolchain must already be on the system,
	so you need to install the binary toolchain first to satisfy the
	circular dependency.
    </para>

    &lfs121_checked;

    <bridgehead renderas="sect3">Binary Package Information</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Binary Download: <ulink url="&mingw-w64-binary-download-http;"/>
        </para>
      </listitem>
      <listitem>
        <para>
          Download MD5 sum: &mingw-w64-binary-md5sum;
        </para>
      </listitem>
      <listitem>
        <para>
          Download size (binary): &mingw-w64-binary-size;
        </para>
      </listitem>
      <listitem>
        <para>
          Estimated disk space required: &mingw-w64-binary-buildsize;
        </para>
      </listitem>
    </itemizedlist>

    <note>
    <para>
	There is only one binary package, but that is fine.
	The <application>MinGW-w64</application> binaries
	are separated based on the target architecture
	and the binaries are often named with the architecture
	prefix such as x86_64 and i686. The binary package
	has binaries for those two architectures.
    </para>
    </note>

  </sect2>

  <sect2 role="installation">
    <title>Installation of MinGW-w64 Binaries</title>

    <para>
	Install the <application>MinGW-w64</application>
	binaries by running the following commands as the
	<systemitem class="username">root</systemitem> user
	while still in the directory the tarball is in:
    </para>

<screen role="root"><userinput>export MINGWTBPATH=$PWD &amp;&amp;
cd /opt 	       &amp;&amp;
tar xpvf "$MINGWTBPATH"/mingw-w64-gcc-&gcc-version;-mingw-&mingw-w64-version;.tar.xz 

ln -sv mingw-w64-latest-03122024 mingw-w64 &amp;&amp;
cd $MINGWTBPATH

unset MINGWTBPATH</userinput></screen>

    <para>
	Now adjust the <filename>PATH</filename> variable so
	the <application>MinGW-w64</application> software can be found
	and used:
    </para>

<screen><userinput>PATH_HOLD=$PATH &amp;&amp;
export PATH=/opt/mingw-w64/usr/bin:$PATH_HOLD</userinput></screen>

  </sect2>

</sect1>
