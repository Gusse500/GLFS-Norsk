<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;
]>

<sect1 id="aboutgles" xreflabel="About GLES (OpenGL ES)">
  <?dbhtml filename="aboutgles.html"?>

  <title>About GLES (OpenGL ES)</title>

  <sect2>
    <title>What is GLES?</title>

    <para>
      GLES, or OpenGL ES, or OpenGL for Embedded Systems, is what the full name
      suggests: it is a stripped down version of OpenGL, a subset, with a
      slightly different API here and there. It is used mostly for devices with
      ARM chips such as smart phones and tablets, but is also used in gaming
      consoles. On the Linux desktop, you typically have desktop, or full,
      OpenGL, EGL, GLX, and GLESv{1,2,3}. OpenGL, EGL, and GLX are the most
      used of that list. OpenGL is used as the general OpenGL API, EGL is used
      as an interface between rendering APIs, like OpenGL or Vulkan, and the
      windowing system, and GLX allows for embedding OpenGL in
      <application>X</application> Window System applications.
    </para>

    <para>
      GLES, specifically v2 and v3, are used sometimes, but mostly in one area.
      Such an area is in <application>Wayland</application> compositors and
      compositor libraries, such as <application>Hyprland</application>,
      <application>Mutter</application>, <application>Wayfire</application>,
      and <application>Wlroots</application>. While compositors can utilize
      Vulkan, most compositors require GLES rendering and don't offer a Vulkan
      solution, or any other rendering API solution. GLESv1 on the otherhand is
      an outdated specification of the GLES API that has been phased out for
      many years. This book disables building for GLESv1 as it is deprecated.
      You may build the API spec if you wish.
    </para>

  </sect2>

  <sect2>
    <title>History of Wayland and GLES</title>

    <para>
      When the <application>Wayland</application> set of protocols were made, a
      reference implementation had to be made for it to show what was possible,
      and how to create a compositor for the new protocol. The result was
      <application>Weston</application>. For its rendering API, it used, and
      uses, GLES and EGL. This was done so that the dependency on the libraries
      from the <application>X</application> Window System wasn't needed, that a
      Wayland-only setup was possible. A small benefit of using GLES was that
      it could run on embedded systems like Raspberry Pis.
    </para>

    <para>
      Thus, compositors and compositor libraries followed suite and did the
      same thing. However, any rendering API can be used as long as it can be
      put through EGL. Desktop OpenGL and Vulkan can be used with no issues.
      Today, the situation is the same and most compositors don't accept any
      other rendering API besides GLES.
    </para>

  </sect2>

  <sect2>
    <title>Do I need GLES?</title>

    <para>
      If you are wanting to use Wayland compositors, and are going to use one
      that does not support Vulkan rendering, you are very likely going to have
      to build GLES v2 and v3, or else OpenGL and EGL rendering will not be an
      option. There are very few Wayland compositors that support Vulkan and do
      not require GLES. If you do find one, like <ulink
      url="https://codeberg.org/dwl/dwl">dwl</ulink>, you won't really need
      GLES beyond compositing. Wayland clients, which are applications, will
      typically just use OpenGL and/or Vulkan with EGL. This means that you
      would be able to skip GLES support but would kill off the ability to use
      other Wayland compositors that require GLES rendering.
    </para>

    <para>
      On the otherhand, if you are using the <application>X</application>
      Window System, GLES will almost never be used and that support for the
      API can be disabled without much worry. However, you kill off the ability
      to use Wayland compositors that require GLES rendering if you want to
      switch over to Wayland in the future.
    </para>

  </sect2>

  <sect2>
    <title>Disabling GLES</title>

    <para>
      If you decided to disable GLES support, it is pretty easy to not build in
      support for the API. OpenGL and other APIs that talk to it are supplied
      by both <xref linkend="libglvnd"/> and <xref linkend="mesa"/>. In
      <quote>Command Explanations</quote>, there will be options that will
      explain the options required to disable the support. Furthermore,
      <xref linkend="nvidia"/> installs drivers for GLES. The installation
      instructions for that driver will cover how to delete them if you do not
      need GLES.
    </para>

    <para>
      If you already have installed GLES from any of the OpenGL providers,
      removing all the related files is pretty easy. You can follow the
      instructions below as the &root; user to remove the API:
    </para>

<screen role="root"><userinput>for libdir in /usr/lib*; do
  rm -vf  $libdir/pkgconfig/gles*
  rm -vrf /usr/include/GLES*
  rm -vf  $libdir/libGLES*
done
ldconfig</userinput></screen>

    <para>
      Recompile any packages as necessary to remove the dependency on GLES.
    </para>

    <para>
      If you have decided to revert your decision and wish to build support for
      GLES, just recompile OpenGL from the original OpenGL provider you went
      with without the option needed to disable GLESv2. You can however keep
      the option to disable GLESv1 as v1 is an outdated spec and not needed
      today.
    </para>

  </sect2>
      
</sect1>
