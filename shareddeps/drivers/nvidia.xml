<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY nvidia-download-http "https://us.download.nvidia.com/XFree86/Linux-x86_64/&nvidia-version;/NVIDIA-Linux-x86_64-&nvidia-version;.run">
]>


<sect1 id="nvidia" xreflabel="NVIDIA-&nvidia-version;">
  <?dbhtml filename="nvidia.html"?>

  <title>NVIDIA-&nvidia-version;</title>

  <indexterm zone="nvidia">
    <primary sortas="a-nvidia">NVIDIA</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to NVIDIA</title>

    <para>
      The <application>NVIDIA</application> proprietary driver contains
      firmware, kernel drivers, userland drivers pertaining to OpenGL,
      Vulkan, and hardware acceleration, and provides useful utilites for
      NVIDIA cards.
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Recommended kernel version to use: linux-&nvidia-linux-version;
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&nvidia-download-http;"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/nvidia/nvidia-&nvidia-version;-gcc15.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">NVIDIA Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
      <xref linkend="gbm"/>,
      <xref linkend="libglvnd"/>, and
      <xref linkend="xorg7-lib"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <xref linkend="libvdpau"/> (for using the VDPAU driver)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libvk"/> (needed to install the Vulkan drivers)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="wayland"/> (needed for Wayland support)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="xorg-server"/> (required for running
            <command>nvidia-xconfig</command>; this driver will ask you if you
            want to run that utility during installation; however, running this
            program can be done in <xref linkend="whatnow"/>)
          </para>
        </listitem>
      </itemizedlist>
    </para>

  </sect2>

  <sect2 role="installation">
    <title>Installation of NVIDIA</title>

    <note>
      <para>
        Make sure to execute the following commands when an <application>Xorg
        </application> instance isn't running, or else the driver will
        complain and quit. Alternatively, you can pass <parameter>
        --allow-installation-with-running-driver --no-x-check</parameter> to
        <command>nvidia-installer</command> to override NVIDIA's warnings. This
        is not recommended as it skips sanity checks, but is generally safe. If
        you do this, you should reboot afterwards.
      </para>

      <para>
        Along with that, be sure to have the kernel source that you have
        compiled the kernel you are currently using with. Make sure the
        source tree has not been moved, or else you will have to specify
        the kernel source tree directory using <parameter>
        --kernel-source-path=&lt;path&gt;</parameter>. If you don't have
        the source tree on your system, the driver will fail to install.
      </para>

      <para>
        For a complete list of flags, pass <parameter>-A</parameter>.
      </para>
    </note>

    <para>
      First enable XFree86 DRI and Nouveau
      <footnote><para>
        Newer versions of
        the NVIDIA drivers will fail to compile with TTY support unless a
        graphics driver is included in the kernel. Nouveau is used here, though
        alternate graphics drivers may also work.
      </para></footnote>
      support in the kernel and recompile if necessary.
    </para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="nvidia-kernel.xml"/>

    <important><para>
      Build these drivers as kernel modules so that they can properly be
      blacklisted.
    </para></important>

    <para>
      Install <application>NVIDIA</application> by running the following
      command as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>sh NVIDIA-Linux-x86_64-&nvidia-version;.run -x &amp;&amp;
pushd NVIDIA-Linux-x86_64-&nvidia-version; &amp;&amp;
  patch -Np1 -i ../nvidia-&nvidia-version;-gcc15.patch \
    -d kernel &amp;&amp;
  patch -Np1 -i ../nvidia-&nvidia-version;-gcc15.patch \
    -d kernel-open &amp;&amp;
  ./nvidia-installer --no-abi-note \
                     --ui=none     \</userinput><userinput revision='sysv'>
                     --no-systemd  \</userinput><userinput>
                     --install-compat32-libs &amp;&amp;
  popd &amp;&amp;
rm -rf NVIDIA-Linux-x86_64-&nvidia-version;</userinput></screen>

    <tip><para>
      If you aren't booted in the LFS system you are installing GLFS for, then
      it is recommended to copy the above command to a shell script, then once
      you are booted into the LFS system, you can run the script. Running the
      command in a chroot is likely to cause kernel modules to be unable to be
      built due to a different kernel being used on the host.
    </para></tip>

<!--
    <para>
      If you are only interested in the 32-bit driver, install x86
      <application>NVIDIA</application> by running the following
      commands as the <systemitem class="username">root</systemitem> user:
    </para>

<screen role="root"><userinput>sh NVIDIA-Linux-x86-390.157.run</userinput></screen>
-->

    <para>
      And just follow the prompts. It will first ask if you wish to install
      the NVIDIA Proprietary or MIT/GPL kernel modules. If you have the
      NVIDIA Grace Hopper or NVIDIA Blackwell cards, you must choose the
      MIT/GPL option. If you have a Turing, Ampere, Ada Lovelace,
      or Hopper card, it is recommended to now choose the MIT/GPL option.
      If you have a Maxwell, Pascal, or Volta card, choose NVIDIA Proprietary.
      If you are using both an older and newer card, but not the newest cards,
      go with NVIDIA Proprietary.
    </para>

    <note>
      <para>
        If you are having trouble installing the driver, it might be because
        it has issues with the Ncurses library. Pass <parameter>--silent
        </parameter> to the above command for your architecture as it may
        solve the issue. Also pass <parameter>-M &lt;kernel_type&gt;</parameter>
        where <parameter>&lt;kernel_type&gt;</parameter> can be
        <parameter>open</parameter> or <parameter>proprietary</parameter>.
        For the notice above, NVIDIA Proprietary is
        <parameter>proprietary</parameter> and MIT/GPL is
        <parameter>open</parameter>.
      </para>

      <para>
        You may also encounter an error saying the the driver failed to build
        a kernel module. This is usually because the kernel version you are
        using is <quote>too high.</quote> If this happens, it may be necessary
        to downgrade the kernel to a lower version. When a new driver release
        happens, the driver will then most likely support the kernel version at
        the time. At the top of this section, the recommended kernel version
        to use with this driver is mentioned to ensure that a build failure
        does not occur. The current kernel version used for kernel
        parameters and such in this book is linux-&linux-version;.
      </para>
    </note>

    <important>
      <para>
        When you update the kernel, you will also need to reinstall the
        <application>NVIDIA</application> driver.
      </para>

      <para>
        This is because there is glue when kernel modules are built. This glue
        doesn't matter too much with first party modules (modules in the kernel
        source tree) as the modules are updated at the same time the kernel is.
        At that point, there is new glue holding them together. However, when
        it comes to third party modules, they aren't updated when the kernel
        updates, so this glue the third party modules had on the kernel breaks.
        This leads to broken kernel modules. This also applies if you stay on
        the same kernel version but change some options, this can also break
        the glue.
      </para>

      <para>
        Be sure that when you reinstall the driver, make sure you are using
        the new kernel and have the kernel source you built from. Otherwise
        the driver will fail to install.
      </para>
    </important>

  </sect2>

  <sect2 role="commands">
    <title>Command Explanations</title>

    <para>
      <parameter>-x</parameter>: This switch extracts the runfile.
    </para>

    <para>
      <command>patch ...</command>: These commands apply patches that force
      the installation to use <parameter>-std=gnu17</parameter> when compiling
      kernel modules. This is necessary to allow building with GCC-15.x.x.
    </para>

    <para>
      <parameter>--no-abi-note</parameter>: This parameter removes a mostly
      useless note about a minimum kernel version for NVIDIA OpenGL libraries.
    </para>

    <para>
      <parameter>--ui=none</parameter>: This disables a TUI menu which can get
      graphical issues during installation.
    </para>

    <para revision="sysv">
      <parameter>--no-systemd</parameter>: This parameter disables Systemd
      support.
    </para>

    <para>
      <parameter>--install-compat32-libs</parameter>: This option enables the
      installation of 32-bit libraries by default instead of being prompted.
    </para>

  </sect2>

  <sect2 role="configuration">
    <title>Configuring NVIDIA</title>

    <sect3 id="nvidia-config">
      <title>Config Files</title>
      <para>
        <filename>/etc/modprobe.d/nvfb.conf</filename>
      </para>
    </sect3>

    <sect3><title>Configuration Information</title>

      <para>
        Nouveau support was compiled into the kernel to make the NVIDIA driver
        build. However, Nouveau conflicts with NVIDIA, so it should be
        blacklisted.
      </para>

      <para>
        As the &root; user, create the file
        <filename>/etc/modprobe.d/nvfb.conf</filename> to blacklist Nouveau:
      </para>
      
<screen role="root"><userinput>mkdir -pv /etc/modprobe.d &amp;&amp;
cat &gt;&gt; /etc/modprobe.d/nvfb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/nvfb.conf

blacklist nvidiafb
blacklist nouveau

# End /etc/modprobe.d/nvfb.conf</literal>
EOF</userinput></screen>

      <para>
        Furthermore, this driver does not install DRI
        <footnote><para>
          Direct Rendering Infrastructure.
        </para></footnote>
        drivers or driver stubs. Likewise, it does not install a
        <application>pkg-config</application> file saying where to find the
        associated files. The files aren't needed with this driver. However,
        some applications expect the <application>pkg-config</application> file
        to exist, namely <xref linkend="xorg-server"/>. Create one now as the
        &root; user:
      </para>

<screen role="root"><userinput>cat &gt; /usr/lib/pkgconfig/dri.pc &lt;&lt; "EOF"
<literal>prefix=/usr
includedir=${prefix}/include

dridriverdir=/usr/lib/dri

Name: dri
Description: Direct Rendering Infrastructure
Version: &nvidia-version;
Requires.private: libdrm >=  2.4.109
Cflags: -I${includedir}</literal>
EOF</userinput></screen>

      <para>
        Applications that do require this file typically will not link against
        any library in <filename class="libraryfile">/usr/lib/dri</filename>.
        If you are worried that an application will try to link against
        non-existent libraries, you can compile <xref linkend="mesa"/> to get
        these libraries and a real <application>pkg-config</application> file.
        Note that those libraries will not be used when this driver is in use.
      </para>

      <note><para>
        Now you should skip to <xref linkend="xcb-utils"/>.
      </para></note>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Firmware</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          nvidia-bug-report.sh,
          nvidia-cuda-mps-control,
          nvidia-cuda-mps-server,
          nvidia-debugdump,
          nvidia-installer,
          nvidia-modprobe,
          nvidia-ngx-updater,
          <phrase revision="systemd">
          nvidia-persistenced,
          nvidia-powerd,</phrase>
          nvidia-settings,
          <phrase revision="systemd">
          nvidia-sleep.sh,</phrase>
          nvidia-smi,
          nvidia-uninstall, and
          nvidia-xconfig
        </seg>
        <seg>
          gsp_ga10x.bin and
          gsp_tu10x.bin
        </seg>
        <seg>
          libEGL_nvidia,
          libGLESv1_CM_nvidia,
          libGLESv2_nvidia,
          libGLX_nvidia,
          libcuda,
          libcudadebugger,
          libglxserver_nvidia,
          libnvcuvid,
          libnvidia-allocator,
          libnvidia-api,
          libnvidia-cfg,
          libnvidia-egl-gbm,
          libnvidia-egl-wayland,
          libnvidia-eglcore,
          libnvidia-encode,
          libnvidia-fbc,
          libnvidia-glcore,
          libnvidia-glsi,
          libnvidia-glvkspirv,
          libnvidia-gpucomp,
          libnvidia-gtk2,
          libnvidia-gtk3,
          libnvidia-ml,
          libnvidia-ngx,
          libnvidia-nvvm,
          libnvidia-opencl,
          libnvidia-opticalflow,
          libnvidia-pkcs11-openssl3,
          libnvidia-pkcs11,
          libnvidia-ptxjitcompiler,
          libnvidia-rtcore,
          libnvidia-tls,
          libnvidia-wayland-client,
          libnvoptix,
          for <xref linkend="wine"/> (_nvngx and nvngx; both are DLLs),
          libvdpau_nvidia,
          nvidia-drm_gbm, and
          nvidia_drv
        </seg>
        <seg>
          /usr/lib/firmware/nvidia/&nvidia-version;,
          /usr/lib/gbm,
          /usr/lib/modprobe.d,
          /usr/lib/modules-load.d,
          /usr/lib/nvidia/wine,
          /usr/lib/nvidia/xorg,
          <phrase revision="systemd">
          /usr/lib/systemd/system-sleep,
          /usr/lib/systemd/system,</phrase>
          /usr/lib/sysusers.d,
          /usr/lib/vdpau,
          /usr/lib/xorg/modules/drivers,
          /usr/share/X11/xorg.conf.d,
          <phrase revision="systemd">
          /usr/share/dbus-1/system.d,</phrase>
          /usr/share/egl/egl_external_platform.d,
          /usr/share/nvidia,
          /etc/share/vulkan/icd.d,
          /etc/share/vulkan/implicit_layer.d, and
          /usr/src/debug/nvidia-utils
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="nvidia-bug-report.sh">
        <term><command>nvidia-bug-report.sh</command></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> bug reporting shell script
          </para>
          <indexterm zone="nvidia nvidia-bug-report.sh">
            <primary sortas="b-nvidia-bug-report.sh">nvidia-bug-report.sh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-cuda-mps-control">
        <term><command>nvidia-cuda-mps-control</command></term>
        <listitem>
          <para>
            allows multiple CUDA processes to share a single GPU context
          </para>
          <indexterm zone="nvidia nvidia-cuda-mps-control">
            <primary sortas="b-nvidia-cuda-mps-control">nvidia-cuda-mps-control</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-cuda-mps-server">
        <term><command>nvidia-cuda-mps-server</command></term>
        <listitem>
          <para>
            creates the shared GPU context, manages the clients, and issues work
            to the GPU on behalf of the clients
          </para>
          <indexterm zone="nvidia nvidia-cuda-mps-server">
            <primary sortas="b-nvidia-cuda-mps-server">nvidia-cuda-mps-server</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-debugdump">
        <term><command>nvidia-debugdump</command></term>
        <listitem>
          <para>
            collects the internal GPU state
          </para>
          <indexterm zone="nvidia nvidia-debugdump">
            <primary sortas="b-nvidia-debugdump">nvidia-debugdump</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-installer">
        <term><command>nvidia-installer</command></term>
        <listitem>
          <para>
            installs, upgrades, and uninstalls the <application>NVIDIA
            </application> driver (running the runfile directly is
            recommended)
          </para>
          <indexterm zone="nvidia nvidia-installer">
            <primary sortas="b-nvidia-installer">nvidia-installer</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-modprobe">
        <term><command>nvidia-modprobe</command></term>
        <listitem>
          <para>
            creates Linux device files and loads the <application>NVIDIA
            </application> kernel module
          </para>
          <indexterm zone="nvidia nvidia-modprobe">
            <primary sortas="b-nvidia-modprobe">nvidia-modprobe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-ngx-updater">
        <term><command>nvidia-ngx-updater</command></term>
        <listitem>
          <para>
            updates NGX features without requiring a full application update
          </para>
          <indexterm zone="nvidia nvidia-ngx-updater">
            <primary sortas="b-nvidia-ngx-updater">nvidia-ngx-updater</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-persistenced" revision="systemd">
        <term><command>nvidia-persistenced</command></term>
        <listitem>
          <para>
            maintains the persistent driver state
          </para>
          <indexterm zone="nvidia nvidia-persistenced">
            <primary sortas="b-nvidia-persistenced">nvidia-persistenced</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-powerd" revision="systemd">
        <term><command>nvidia-powerd</command></term>
        <listitem>
          <para>
            provides support for the <application>NVIDIA</application>
            Dynamic Boost feature
          </para>
          <indexterm zone="nvidia nvidia-powerd">
            <primary sortas="b-nvidia-powerd">nvidia-powerd</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-settings">
        <term><command>nvidia-settings</command></term>
        <listitem>
          <para>
            a GUI application relying on <ulink url="&blfs-svn;/x/gtk3.html">GTK-3
            </ulink> that allows tweaking settings like resolution and refresh rate
          </para>
          <indexterm zone="nvidia nvidia-settings">
            <primary sortas="b-nvidia-settings">nvidia-settings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-sleep.sh" revision="systemd">
        <term><command>nvidia-sleep.sh</command></term>
        <listitem>
          <para>
            interacts with the <filename>
            /proc/driver/nvidia/suspend</filename> interface
          </para>
          <indexterm zone="nvidia nvidia-sleep.sh">
            <primary sortas="b-nvidia-sleep.sh">nvidia-sleep.sh</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-smi">
        <term><command>nvidia-smi</command></term>
        <listitem>
          <para>
            provides montioring information for Tesla and select Quadro devices
          </para>
          <indexterm zone="nvidia nvidia-smi">
            <primary sortas="b-nvidia-smi">nvidia-smi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-uninstall">
        <term><command>nvidia-uninstall</command></term>
        <listitem>
          <para>
            installs, upgrades, and uninstalls the <application>NVIDIA
            </application> driver (running the runfile directly is
            recommended)
          </para>
          <indexterm zone="nvidia nvidia-uninstall">
            <primary sortas="b-nvidia-uninstall">nvidia-uninstall</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-xconfig">
        <term><command>nvidia-xconfig</command></term>
        <listitem>
          <para>
            manipulates <application>X11</application> configuration files
            to allow the <application>NVIDIA</application> driver to be used
            when starting <application>X11</application>
          </para>
          <indexterm zone="nvidia nvidia-xconfig">
            <primary sortas="b-nvidia-xconfig">nvidia-xconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libEGL_nvidia">
        <term><filename class="libraryfile">libEGL_nvidia</filename></term>
        <listitem>
          <para>
            provides <application>NVIDIA</application> implementations
            of OpenGL functionality
          </para>
          <indexterm zone="nvidia libEGL_nvidia">
            <primary sortas="c-libEGL_nvidia">libEGL_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLESv1_CM_nvidia">
        <term><filename class="libraryfile">libGLESv1_CM_nvidia</filename></term>
        <listitem>
          <para>
            provides the API entry points for all OpenGL ES and EGL function calls
          </para>
          <indexterm zone="nvidia libGLESv1_CM_nvidia">
            <primary sortas="c-libGLESv1_CM_nvidia">libGLESv1_CM_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLESv2_nvidia">
        <term><filename class="libraryfile">libGLESv2_nvidia</filename></term>
        <listitem>
          <para>
            provides the API entry points for all OpenGL ES and EGL function calls
          </para>
          <indexterm zone="nvidia libGLESv2_nvidia">
            <primary sortas="c-libGLESv2_nvidia">libGLESv2_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLX_nvidia">
        <term><filename class="libraryfile">libGLX_nvidia</filename></term>
        <listitem>
          <para>
            provides <application>NVIDIA</application> implementations
            of OpenGL functionality
          </para>
          <indexterm zone="nvidia libGLX_nvidia">
            <primary sortas="c-libGLX_nvidia">libGLX_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcuda">
        <term><filename class="libraryfile">libcuda</filename></term>
        <listitem>
          <para>
            provides runtime support for CUDA
          </para>
          <indexterm zone="nvidia libcuda">
            <primary sortas="c-libcuda">libcuda</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcudadebugger">
        <term><filename class="libraryfile">libcudadebugger</filename></term>
        <listitem>
          <para>
            provides support for debugging CUDA applications
          </para>
          <indexterm zone="nvidia libcudadebugger">
            <primary sortas="c-libcudadebugger">libcudadebugger</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libglxserver_nvidia">
        <term><filename class="libraryfile">libglxserver_nvidia</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> GLX extension module for
            <application>X11</application>
          </para>
          <indexterm zone="nvidia libglxserver_nvidia">
            <primary sortas="c-libglxserver_nvidia">libglxserver_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvcuvid">
        <term><filename class="libraryfile">libnvcuvid</filename></term>
        <listitem>
          <para>
            provides an interface to hardware video decoding capabilities
          </para>
          <indexterm zone="nvidia libnvcuvid">
            <primary sortas="c-libnvcuvid">libnvcuvid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-allocator">
        <term><filename class="libraryfile">libnvidia-allocator</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-allocator">
            <primary sortas="c-libnvidia-allocator">libnvidia-allocator</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-api">
        <term><filename class="libraryfile">libnvidia-api</filename></term>
        <listitem>
          <para>
            provides an interface for managing properties of GPUs
          </para>
          <indexterm zone="nvidia libnvidia-api">
            <primary sortas="c-libnvidia-api">libnvidia-api</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-cfg">
        <term><filename class="libraryfile">libnvidia-cfg</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-cfg">
            <primary sortas="c-libnvidia-cfg">libnvidia-cfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-egl-gbm">
        <term><filename class="libraryfile">libnvidia-egl-gbm</filename></term>
        <listitem>
          <para>
            provides GBM EGL application support
          </para>
          <indexterm zone="nvidia libnvidia-egl-gbm">
            <primary sortas="c-libnvidia-egl-gbm">libnvidia-egl-gbm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-egl-wayland">
        <term><filename class="libraryfile">libnvidia-egl-wayland</filename></term>
        <listitem>
          <para>
            provides client-side <application>Wayland</application> EGL
            application support
          </para>
          <indexterm zone="nvidia libnvidia-egl-wayland">
            <primary sortas="c-libnvidia-egl-wayland">libnvidia-egl-wayland</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-eglcore">
        <term><filename class="libraryfile">libnvidia-eglcore</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-eglcore">
            <primary sortas="c-libnvidia-eglcore">libnvidia-eglcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-encode">
        <term><filename class="libraryfile">libnvidia-encode</filename></term>
        <listitem>
          <para>
            provides an interface to video encoder hardware
          </para>
          <indexterm zone="nvidia libnvidia-encode">
            <primary sortas="c-libnvidia-encode">libnvidia-encode</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-fbc">
        <term><filename class="libraryfile">libnvidia-fbc</filename></term>
        <listitem>
          <para>
            provides an interface to capture and optionally encode the
            framebuffer of an <application>X11</application> server screen
          </para>
          <indexterm zone="nvidia libnvidia-fbc">
            <primary sortas="c-libnvidia-fbc">libnvidia-fbc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glcore">
        <term><filename class="libraryfile">libnvidia-glcore</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-glcore">
            <primary sortas="c-libnvidia-glcore">libnvidia-glcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glsi">
        <term><filename class="libraryfile">libnvidia-glsi</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-glsi">
            <primary sortas="c-libnvidia-glsi">libnvidia-glsi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glvkspirv">
        <term><filename class="libraryfile">libnvidia-glvkspirv</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-glvkspirv">
            <primary sortas="c-libnvidia-glvkspirv">libnvidia-glvkspirv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gpucomp">
        <term><filename class="libraryfile">libnvidia-gpucomp</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-gpucomp">
            <primary sortas="c-libnvidia-gpucomp">libnvidia-gpucomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gtk2">
        <term><filename class="libraryfile">libnvidia-gtk2</filename></term>
        <listitem>
          <para>
            provides the <command>nvidia-settings</command> user interface
          </para>
          <indexterm zone="nvidia libnvidia-gtk2">
            <primary sortas="c-libnvidia-gtk2">libnvidia-gtk2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gtk3">
        <term><filename class="libraryfile">libnvidia-gtk3</filename></term>
        <listitem>
          <para>
            provides the <command>nvidia-settings</command> user interface
          </para>
          <indexterm zone="nvidia libnvidia-gtk3">
            <primary sortas="c-liblnvidia-gtk3">libnvidia-gtk3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ml">
        <term><filename class="libraryfile">libnvidia-ml</filename></term>
        <listitem>
          <para>
            provides a monitoring and management API
          </para>
          <indexterm zone="nvidia libnvidia-ml">
            <primary sortas="c-libnvidia-ml">libnvidia-ml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ngx">
        <term><filename class="libraryfile">libnvidia-ngx</filename></term>
        <listitem>
          <para>
            provides functions for AI features
          </para>
          <indexterm zone="nvidia libnvidia-ngx">
            <primary sortas="c-libnvidia-ngx">libnvidia-ngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-nvvm">
        <term><filename class="libraryfile">libnvidia-nvvm</filename></term>
        <listitem>
          <para>
            provides JIT link-time-optimization for the CUDA driver
          </para>
          <indexterm zone="nvidia libnvidia-nvvm">
            <primary sortas="c-libnvidia-nvvm">libnvidia-nvvm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-opencl">
        <term><filename class="libraryfile">libnvidia-opencl</filename></term>
        <listitem>
          <para>
            provides <application>NVIDIA</application>'s implementation of
            the OpenCL API standard
          </para>
          <indexterm zone="nvidia libnvidia-opencl">
            <primary sortas="c-libnvidia-opencl">libnvidia-opencl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-opticalflow">
        <term><filename class="libraryfile">libnvidia-opticalflow</filename></term>
        <listitem>
          <para>
            can be used for hardware-accelerated computation of optical flow
            vectors and stereo disparity values
          </para>
          <indexterm zone="nvidia libnvidia-opticalflow">
            <primary sortas="c-libnvidia-opticalflow">libnvidia-opticalflow</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-pkcs11-openssl3">
        <term><filename class="libraryfile">libnvidia-pkcs11-openssl3</filename></term>
        <listitem>
          <para>
            is a cryptography library wrapper aiming to provide cryptography
            operations when the GPU and driver are operating in Confidential
            Compute mode
          </para>
          <indexterm zone="nvidia libnvidia-pkcs11-openssl3">
            <primary sortas="c-libnvidia-pkcs11-openssl3">libnvidia-pkcs11-openssl3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-pkcs11">
        <term><filename class="libraryfile">libnvidia-pkcs11</filename></term>
        <listitem>
          <para>
            is a cryptography library wrapper aiming to provide cryptography
            operations when the GPU and driver are operating in Confidential
            Compute mode
          </para>
          <indexterm zone="nvidia libnvidia-pkcs11">
            <primary sortas="c-libnvidia-pkcs11">libnvidia-pkcs11</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ptxjitcompiler">
        <term><filename class="libraryfile">libnvidia-ptxjitcompiler</filename></term>
        <listitem>
          <para>
            is a JIT compiler which compiles PTX into GPU machine code and is
            used by the CUDA driver
          </para>
          <indexterm zone="nvidia libnvidia-ptxjitcompiler">
            <primary sortas="c-libnvidia-ptxjitcompiler">libnvidia-ptxjitcompiler</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-rtcore">
        <term><filename class="libraryfile">libnvidia-rtcore</filename></term>
        <listitem>
          <para>
            is used internally by other driver components
          </para>
          <indexterm zone="nvidia libnvidia-rtcore">
            <primary sortas="c-libnvidia-rtcore">libnvidia-rtcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-tls">
        <term><filename class="libraryfile">libnvidia-tls</filename></term>
        <listitem>
          <para>
            provides thread local storage support for the <application>NVIDIA
            </application> OpenGL libraries
          </para>
          <indexterm zone="nvidia libnvidia-tls">
            <primary sortas="c-libnvidia-tls">libnvidia-tls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-wayland-client">
        <term><filename class="libraryfile">libnvidia-wayland-client</filename></term>
        <listitem>
          <para>
            is required for <command>nvidia-settings</command> on
            <application>Wayland</application>
          </para>
          <indexterm zone="nvidia libnvidia-wayland-client">
            <primary sortas="c-libnvidia-wayland-client">libnvidia-wayland-client</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvoptix">
        <term><filename class="libraryfile">libnvoptix</filename></term>
        <listitem>
          <para>
            implements the OptiX ray tracing engine
          </para>
          <indexterm zone="nvidia libnvoptix">
            <primary sortas="c-libnvoptix">libnvoptix</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libvdpau_nvidia">
        <term><filename class="libraryfile">libvdpau_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation for
            the VDPAU library
          </para>
          <indexterm zone="nvidia libvdpau_nvidia">
            <primary sortas="c-libvdpau_nvidia">libvdpau_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="_nvngx">
        <term><filename class="libraryfile">_nvngx</filename></term>
        <listitem>
          <para>
            provides DLSS support for use with <application>Wine</application>
          </para>
          <indexterm zone="nvidia _nvngx">
            <primary sortas="c-_nvngx">_nvngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvngx">
        <term><filename class="libraryfile">nvngx</filename></term>
        <listitem>
          <para>
            provides DLSS support for use with Proton
          </para>
          <indexterm zone="nvidia nvngx">
            <primary sortas="c-nvngx">nvngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-drm_gbm">
        <term><filename class="libraryfile">nvidia-drm_gbm</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> implementation of GBM
          </para>
          <indexterm zone="nvidia nvidia-drm_gbm">
            <primary sortas="c-nvidia-drm_gbm">nvidia-drm_gbm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia_drv">
        <term><filename class="libraryfile">nvidia_drv</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> <application>X11
            </application> driver
          </para>
          <indexterm zone="nvidia nvidia_drv">
            <primary sortas="c-nvidia_drv">nvidia_drv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
