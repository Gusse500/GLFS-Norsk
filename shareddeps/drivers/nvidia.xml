<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../../general.ent">
  %general-entities;

  <!ENTITY nvidia-download-http "https://us.download.nvidia.com/XFree86/Linux-x86_64/&nvidia-version;/NVIDIA-Linux-x86_64-&nvidia-version;.run">
]>

<sect1 id="nvidia" xreflabel="NVIDIA-&nvidia-version;">
  <?dbhtml filename="nvidia.html"?>

  <title>NVIDIA-&nvidia-version;</title>

  <indexterm zone="nvidia">
    <primary sortas="a-nvidia">NVIDIA</primary>
  </indexterm>

  <sect2 role="package">
    <title>Introduction to NVIDIA</title>

    <para>
      The <application>NVIDIA</application> proprietary driver contains
      firmware, kernel drivers, userland drivers pertaining to OpenGL,
      Vulkan, and hardware acceleration, and provides useful utilites for
      NVIDIA cards.
    </para>

    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Recommended kernel version to use: linux-&nvidia-linux-version;
        </para>
      </listitem>
      <listitem>
        <para>
          Download (HTTP): <ulink url="&nvidia-download-http;"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">Additional Downloads</bridgehead>
    <itemizedlist spacing="compact">
      <listitem>
        <para>
          Required patch:
          <ulink url="&patch-root;/nvidia/nvidia-&nvidia-version;-gcc15.patch"/>
        </para>
      </listitem>
    </itemizedlist>

    <bridgehead renderas="sect3">NVIDIA Dependencies</bridgehead>

    <bridgehead renderas="sect4">Required</bridgehead>
    <para role="required">
      <xref linkend="gbm"/>,
      <xref linkend="libglvnd"/>, and
      <xref linkend="xorg7-lib"/>
    </para>

    <bridgehead renderas="sect4">Recommended</bridgehead>
    <para role="recommended">
      <itemizedlist spacing="compact">
        <listitem>
          <para>
            <ulink url="&blfs-svn;/x/gtk3.html">GTK-3</ulink> (for
            <command>nvidia-settings</command>)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libvdpau"/> (for using the VDPAU driver)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="libvk"/> (for using the Vulkan drivers)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="wayland"/> (needed for Wayland support)
          </para>
        </listitem>
        <listitem>
          <para>
            <xref linkend="xorg-server"/> (required for running
            <command>nvidia-xconfig</command>, like in <xref
            linkend="whatnow"/>)
          </para>
        </listitem>
      </itemizedlist>
    </para>

  </sect2>

  <sect2>
    <title>Preparing for the NVIDIA Installation</title>

    <para>
      First enable XFree86 DRI and Nouveau
      <footnote><para>
        Newer versions of
        the NVIDIA drivers will fail to compile with TTY support unless a
        graphics driver is included in the kernel. Nouveau is used here, though
        alternate graphics drivers may also work.
      </para></footnote>
      support in the kernel and recompile if necessary.
    </para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="nvidia-kernel.xml"/>

    <important><para>
      Build these drivers as kernel modules so that they can properly be
      blacklisted.
    </para></important>

    <para>
      Extract the <application>NVIDIA</application> driver runfile and
      navigate to the extracted directory:
    </para>

<screen><userinput>sh NVIDIA-Linux-x86_64-&nvidia-version;.run -x &amp;&amp;
cd NVIDIA-Linux-x86_64-&nvidia-version;</userinput></screen>

    <para>
      Apply a patch for each kernel types for the driver for compatibility with
      <application>GCC-15</application>:
    </para>

<screen><userinput>for kernel_type in kernel{,-open}; do
  pushd $kernel_type &amp;&amp;
    patch -Np1 -i ../../nvidia-&nvidia-version;-gcc15.patch
  popd
done</userinput></screen>

  </sect2>

  <sect2>
    <title>Installation of the NVIDIA Kernel Modules</title>

    <para>
      Now you will need to build the kernel modules for the driver. There are
      two types: <emphasis role="bold">open</emphasis> and
      <emphasis role="bold">proprietary</emphasis>. If you have the
      NVIDIA Grace Hopper or NVIDIA Blackwell cards, you must
      compile the <emphasis role="bold">open</emphasis> kernel modules.
      If you have a Turing, Ampere, Ada Lovelace,
      or Hopper card, it is recommended to now build the
      <emphasis role="bold">open</emphasis> kernel modules.
      If you have a Maxwell, Pascal, or Volta card, build the
      <emphasis role="bold">proprietary</emphasis> kernel modules.
      If you are using both an older and newer card, but not the newest cards,
      build the <emphasis role="bold">proprietary</emphasis> kernel modules.
    </para>

    <para>
      If you are going to build the <emphasis role="bold">open</emphasis>
      kernel modules, set the <envar>NVIDIA_KERNEL_TYPE</envar> variable:
    </para>

<screen><userinput>export NVIDIA_KERNEL_TYPE="kernel-open"</userinput></screen>

    <para>
      If you are going to instead build the <emphasis
      role="bold">proprietary</emphasis> kernel modules, set the
      <envar>NVIDIA_KERNEL_TYPE</envar> variable:
    </para>

<!-- proprietary is the exception, not the rule -->
<screen><computeroutput>export NVIDIA_KERNEL_TYPE="kernel"</computeroutput></screen>

    <para>
      There will be 5 or 6 kernel modules that will be built. Depending on your
      use case, you can skip building a module or two. The UVM (Unified Virtual
      Memory) module is for use with <ulink
      url="&lfs-qol-website;/general/cuda.html">CUDA</ulink>. If you won't use
      it, nor wish to use its capabilities, you can skip building the UVM
      kernel module. There is also the PeerMem module which is for datacenters.
      For gaming, it can safely be disabled.
    </para>

    <para>
      For UVM, the module is named <computeroutput>nvidia-uvm</computeroutput>.
      For PeerMem, it will be named
      <computeroutput>nvidia-peermem</computeroutput>. To skip these, add the
      module names to the <envar>NV_EXCLUDE_KERNEL_MODULES</envar> for the
      <command>make</command> command. The variable should be seperated, as
      such:
      <computeroutput>NV_EXCLUDE_KERNEL_MODULES="nvidia-uvm nvidia-peermem"</computeroutput>.
      The <command>make</command> command will have the variable set to
      nothing. Add to it as you see fit.
    </para>

    <para>
      Now build the kernel modules by running the following commands below
      (the commands below will navigate to the right directory based on what
      <envar>NVIDIA_KERNEL_TYPE</envar> is set to):
    </para>

<screen><userinput>pushd $NVIDIA_KERNEL_TYPE &amp;&amp;
make NV_EXCLUDE_KERNEL_MODULES=</userinput></screen>

    <note>
      <para>
        You may encounter various build failures. This usually happens because
        the kernel version you're using is <quote>too high.</quote> If this
        happens, it may be necessary to downgrade the kernel to a lower
        version. When a new driver release happens, the driver will then most
        likely support the kernel version at the time. At the top of this
        section, the recommended kernel version to use with this driver is
        mentioned to ensure that a build failure does not occur. The current
        kernel version used for kernel parameters and such in this book is
        linux-&linux-version;.
      </para>
    </note>

    <important>
      <para>
        When you update the kernel, you will also need to reinstall the
        <application>NVIDIA</application> kernel modules.
      </para>

      <para>
        This is because there is glue when kernel modules are built. This glue
        doesn't matter too much with first party modules (modules in the kernel
        source tree) as the modules are updated at the same time the kernel is.
        At that point, there is new glue holding them together. However, when
        it comes to third party modules, they aren't updated when the kernel
        updates, so this glue the third party modules had on the kernel breaks.
        This leads to broken kernel modules. This also applies if you stay on
        the same kernel version but change some options, this can also break
        the glue.
      </para>

      <para>
        Be sure that when you reinstall the driver, make sure you are using
        the new kernel and have the kernel source you built from. Otherwise
        the driver will fail to install.
      </para>
    </important>

    <para>
      Now as the &root; user:
    </para>

<screen role="root"><userinput>for mod in nvidia{,-drm,-modeset,-peermem,-uvm}; do
  rm -vf /usr/lib/modules/$(uname -r)/kernel/drivers/video/$mod.ko
done
make modules_install &amp;&amp;
popd</userinput></screen>

    <para>
      Install the firmware as the &root; user:
    </para>

<screen role="root"><userinput>mkdir -pv /usr/lib/firmware/nvidia/&nvidia-version; &amp;&amp;
cp -v firmware/*.bin /usr/lib/firmware/nvidia/&nvidia-version;</userinput></screen>

    <para>
      Finally, unset the <envar>NVIDIA_KERNEL_TYPE</envar> variable:
    </para>
        
<screen><userinput>unset NVIDIA_KERNEL_TYPE</userinput></screen>

  </sect2>

  <sect2 role="installation">
    <title>Installation of the NVIDIA Driver Software</title>

    <para>
      There is plenty of software the <application>NVIDIA</application>
      driver offers, and there are probably a number of the gigantic list that
      you will never need. This all depends on your usecase and what software
      you will use.
    </para>

    <para>
      As such, this section will be modular. Most subsections will have two
      subsections (<quote>64-bit Installation</quote> and
      <quote>32-bit Installation</quote>) and each one has a block of commands.
      It is expected you run them as the &root; user. Nothing needs to be
      compiled in this section as most of the software is proprietary besides
      libraries from packages such as <xref linkend="libglvnd"/> which show up
      in the driver archive. Since the libraries from the listed dependencies
      for this package should already be installed, this section will not
      install the versions of those libraries from this driver.
    </para>

    <tip><para>
      Since there are a lot of subsections, it is recommended to put all the
      blocks of commands you need in one single script that you run each time
      you want to upgrade the driver. This book will not cover how but it
      should generally be straightforward.
    </para></tip>

    <sect3>
      <title>Mandatory Software</title>

      <para>
        Install the software that is needed by other components in this
        driver or help with loading the driver.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>mkdir -pv /usr/share/nvidia  &amp;&amp;
cp -v libnvidia-cfg.so*       \
      libnvidia-eglcore.so*   \
      libnvidia-glcore.so*    \
      libnvidia-glsi.so*      \
      libnvidia-glvkspirv.so* \
      libnvidia-gpucomp.so*   \
      libnvidia-ml.so*        \
      libnvidia-pkcs11*       \
      libnvidia-rtcore.so*    \
      libnvidia-tls.so*       \
      libnvidia-allocator.so* \
      /usr/lib               &amp;&amp;
ln -svrf /usr/lib/libnvidia-allocator.so.&nvidia-version; \
         /usr/lib/gbm/nvidia-drm_gbm.so &amp;&amp;
cp -v nvidia-modprobe         \
      /usr/bin               &amp;&amp;
cp -v nvidia-application-profiles* \
      /usr/share/nvidia</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libnvidia-cfg.so*       \
      libnvidia-eglcore.so*   \
      libnvidia-glcore.so*    \
      libnvidia-glsi.so*      \
      libnvidia-glvkspirv.so* \
      libnvidia-gpucomp.so*   \
      libnvidia-rtcore.so*    \
      libnvidia-allocator.so* \
      /usr/lib32             &amp;&amp;
ln -svrf /usr/lib32/libnvidia-allocator.so.&nvidia-version; \
         /usr/lib32/gbm/nvidia-drm_gbm.so</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>X11</title>

      <para>
        If you are going to use <xref linkend="xorg-server"/> or <xref
        linkend="xwayland"/>, install the <application>X</application> driver
        and the GLX extension module and driver.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>mkdir -pv /usr/lib/xorg/modules/{drivers,extensions} &amp;&amp;
mkdir -pv /usr/share/X11/xorg.conf.d                 &amp;&amp;
cp -v nvidia_drv.so*              \
          /usr/lib/xorg/modules/drivers              &amp;&amp;
cp -v libglxserver_nvidia.so*     \
          /usr/lib/xorg/modules/extensions           &amp;&amp;
cp -v libGLX_nvidia.so*           \
      libnvidia-fbc.so*           \
          /usr/lib                                   &amp;&amp;
cp -v nvidia-drm-outputclass.conf \
          /usr/share/X11/xorg.conf.d</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libGLX_nvidia.so* \
      libnvidia-fbc.so* \
      /usr/lib32</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>EGL</title>

      <para>
        If you are going to use EGL (like with <xref linkend="wayland"/>),
        install the drivers.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>mkdir -pv /usr/share/glvnd/egl_vendor.d &amp;&amp;
cp -v libnvidia-egl-*.so*    \
          /usr/lib                      &amp;&amp;
cp -v libEGL_nvidia.so*    \
          /usr/lib                      &amp;&amp;
cp -v libnvidia-wayland*     \
          /usr/lib                      &amp;&amp;
cp -v 10*.json               \
          /usr/share/glvnd/egl_vendor.d &amp;&amp;
cp -v 15*.json               \
          /usr/share/glvnd/egl_vendor.d &amp;&amp;
cp -v 20*.json               \
          /usr/share/glvnd/egl_vendor.d</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libnvidia-egl-*.so* \
  /usr/lib32 &amp;&amp;
cp -v libEGL_nvidia.so* \
  /usr/lib32</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>GLES v2 and v3</title>

      <para>
        If you didn't disable OpenGL ES v2 and v3 in <xref
        linkend="libglvnd"/>, install the drivers for it.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>cp -v libGLESv2_nvidia.so* \
  /usr/lib</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libGLESv2_nvidia.so* \
  /usr/lib32</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>Vulkan</title>

      <para>
        If you are going to use Vulkan (highly recommended), install the ICD
        configuration file:
      </para>

<screen role="root"><userinput>mkdir -pv /usr/share/vulkan/icd.d &amp;&amp;
cp -v nvidia_icd.json /usr/share/vulkan/icd.d</userinput></screen>

      <para>
        The Vulkan driver according to the ICD configuration file is <filename
        class="libraryfile">libGLX_nvidia</filename>. If you installed the EGL
        drivers, you can change what Vulkan driver is used like so:
      </para>

<screen role="root"><userinput>sed -i 's/GLX/EGL/' \
  /usr/share/vulkan/icd.d/nvidia_icd.json</userinput></screen>

    </sect3>

    <sect3>
      <title>VDPAU</title>

      <para>
        If you installed <xref linkend="libvdpau"/>, install the driver for it.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>cp -v libvdpau_nvidia.so* \
  /usr/lib/vdpau</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libvdpau_nvidia.so* \
  /usr/lib32/vdpau</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>OpenCL</title>

      <para>
        If you want <ulink
        url="https://wiki.archlinux.org/title/GPGPU#OpenCL">OpenCL</ulink>
        support, install the driver and the loader.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>cp -v libOpenCL.so*        \
  /usr/lib &amp;&amp;
cp -v libnvidia-opencl.so* \
  /usr/lib</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libOpenCL.so*        \
  /usr/lib32 &amp;&amp;
cp -v libnvidia-opencl.so* \
  /usr/lib32</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>CUDA</title>

      <para>
        If you want to use <ulink
        url="&lfs-qol-website;/general/cuda.html">CUDA</ulink> or applications
        that uses it, install the libraries for it.
      </para>

      <sect4>
        <title>64-bit Installation</title>

<screen role="root"><userinput>cp -v libcuda.so*         \
      libcudadebugger.so* \
      libnvidia-api.so*   \
      libnvidia-encode*   \
      libnvidia-ptx*      \
      libnvidia-nvvm*     \
      libnvcuvid.so*      \
      /usr/lib</userinput></screen>

      </sect4>

      <sect4>
        <title>32-bit Installation</title>

<screen role="root"><userinput>cp -v libcuda.so*         \
      libnvidia-encode*   \
      libnvidia-ptx*      \
      libnvidia-nvvm*     \
      libnvcuvid.so*      \
      /usr/lib32</userinput></screen>

      </sect4>

    </sect3>

    <sect3>
      <title>NGX</title>

      <para>
        NGX implements DLSS. If you want DLSS, install the drivers for it.
      </para>

<screen role="root"><userinput>mkdir -pv /usr/lib/nvidia/wine &amp;&amp;
cp -v libnvidia-ngx.so* \
          /usr/lib &amp;&amp;
cp -v *nvngx*.dll       \
          /usr/lib/nvidia/wine</userinput></screen>

    </sect3>

    <sect3>
      <title>NVIDIA-Settings</title>

      <para>
        If you want <command>nvidia-settings</command> which can let you change
        settings like framerate in the Xorg server, install it now.
      </para>

<screen role="root"><userinput>cp -v libnvidia-gtk* /usr/lib           &amp;&amp;
install -vm755 nvidia-settings /usr/bin &amp;&amp;
cp -v nvidia-settings.desktop            \
      /usr/share/applications           &amp;&amp;
cp -v nvidia-settings.png                \
      /usr/share/pixmaps</userinput></screen>

    </sect3>

    <sect3>
      <title>NVIDIA-XConfig</title>

      <para>
        If you want <command>nvidia-xconfig</command> which can generate Xorg
        configuration files, then install it now.
      </para>

<screen role="root"><userinput>install -vm755 nvidia-xconfig /usr/bin</userinput></screen>

    </sect3>

    <sect3>
      <title>NVIDIA-SMI</title>

      <para>
        If you want <command>nvidia-smi</command> which grabs information about
        GPU loads, temperatures, etc. and display it in the command line,
        then install it now.
      </para>

<screen role="root"><userinput>install -vm755 nvidia-smi /usr/bin</userinput></screen>

    </sect3>

    <sect3>
      <title>Documentation</title>

      <para>
        If you want to install documentation, do so now.
      </para>

<screen role="root"><userinput>mkdir -pv /usr/share/doc/nvidia-&nvidia-version; &amp;&amp;
cp -vR html /usr/share/doc/nvidia-&nvidia-version;</userinput></screen>

    </sect3>

  </sect2>

  <sect2 role="configuration">
    <title>Configuring NVIDIA</title>

    <sect3 id="nvidia-config">
      <title>Config Files</title>
      <para>
        <filename>/usr/lib/modprobe.d/nvfb.conf</filename>
      </para>
    </sect3>

    <sect3><title>Configuration Information</title>

      <para>
        Nouveau and NVIDIAFB support was compiled into the kernel to make the
        NVIDIA kernel modules build successfully. However, Nouveau and NVIDIAFB
        conflict with the NVIDIA kernel modules, so they should be blacklisted.
      </para>

      <para>
        As the &root; user, create the file
        <filename>/usr/lib/modprobe.d/nvfb.conf</filename> to blacklist Nouveau
        and NVIDIAFB:
      </para>
      
<screen role="root"><userinput>mkdir -pv /usr/lib/modprobe.d &amp;&amp;
cat &gt;&gt; /usr/lib/modprobe.d/nvfb.conf &lt;&lt; "EOF"
<literal># Begin /usr/lib/modprobe.d/nvfb.conf

blacklist nouveau
blacklist nvidiafb

# End /usr/lib/modprobe.d/nvfb.conf</literal>
EOF</userinput></screen>

      <para>
        Furthermore, this driver does not install DRI
        <footnote><para>
          Direct Rendering Infrastructure.
        </para></footnote>
        drivers or driver stubs. Likewise, it does not install a
        <application>pkg-config</application> file saying where to find the
        associated files. The files aren't needed with this driver. However,
        some applications expect the <application>pkg-config</application> file
        to exist, namely <xref linkend="xorg-server"/>. Create one now as the
        &root; user:
      </para>

<screen role="root"><userinput>cat &gt; /usr/lib/pkgconfig/dri.pc &lt;&lt; "EOF"
<literal>prefix=/usr
includedir=${prefix}/include

dridriverdir=/usr/lib/dri

Name: dri
Description: Direct Rendering Infrastructure
Version: &nvidia-version;
Requires.private: libdrm >=  2.4.109
Cflags: -I${includedir}</literal>
EOF</userinput></screen>

      <para>
        Applications that do require this file typically will not link against
        any library in <filename class="libraryfile">/usr/lib/dri</filename>.
        If you are worried that an application will try to link against
        non-existent libraries, you can compile <xref linkend="mesa"/> to get
        these libraries and a real <application>pkg-config</application> file.
        Note that those libraries will not be used when this driver is in use.
      </para>

      <note><para>
        Now you should skip to <xref linkend="xcb-utils"/>.
      </para></note>

    </sect3>

  </sect2>

  <sect2 role="content">
    <title>Contents</title>

    <segmentedlist>
      <segtitle>Installed Programs</segtitle>
      <segtitle>Installed Firmware</segtitle>
      <segtitle>Installed Libraries</segtitle>
      <segtitle>Installed Directories</segtitle>

      <seglistitem>
        <seg>
          nvidia-modprobe,
          nvidia-settings,
          nvidia-smi, and
          nvidia-xconfig
        </seg>
        <seg>
          gsp_ga10x.bin and
          gsp_tu10x.bin
        </seg>
        <seg>
          libcudadebugger,
          libcuda,
          libEGL_nvidia,
          libGLESv2_nvidia,
          libGLX_nvidia,
          libglxserver_nvidia,
          libnvcuvid,
          libnvidia-allocator,
          libnvidia-api,
          libnvidia-cfg,
          libnvidia-eglcore,
          libnvidia-egl-gbm,
          libnvidia-egl-wayland,
          libnvidia-egl-xcb,
          libnvidia-egl-xlib,
          libnvidia-encode,
          libnvidia-fbc,
          libnvidia-glcore,
          libnvidia-glsi,
          libnvidia-glvkspirv,
          libnvidia-gpucomp,
          libnvidia-gtk2,
          libnvidia-gtk3,
          libnvidia-ml,
          libnvidia-ngx,
          libnvidia-nvvm{70,},
          libnvidia-opencl,
          libnvidia-opticalflow,
          libnvidia-pkcs11-openssl3,
          libnvidia-pkcs11,
          libnvidia-ptxjitcompiler,
          libnvidia-rtcore,
          libnvidia-tls,
          libnvidia-wayland-client,
          libOpenCL.so,
          libvdpau_nvidia,
          nvidia-drm_gbm
          nvidia_drv, and
          for <xref linkend="wine"/> (_nvngx,
          nvngx, and
          nvngx_dlssg; all three are DLLs)
        </seg>
        <seg>
          /usr/lib/firmware/nvidia/&nvidia-version;,
          /usr/lib/modprobe.d,
          /usr/lib/nvidia/wine,
          /usr/lib/vdpau,
          /usr/share/X11/xorg.conf.d,
          /usr/share/egl/egl_external_platform.d, and
          /usr/share/nvidia
        </seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">Short Descriptions</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="nvidia-modprobe">
        <term><command>nvidia-modprobe</command></term>
        <listitem>
          <para>
            creates Linux device files and loads the <application>NVIDIA
            </application> kernel module
          </para>
          <indexterm zone="nvidia nvidia-modprobe">
            <primary sortas="b-nvidia-modprobe">nvidia-modprobe</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-settings">
        <term><command>nvidia-settings</command></term>
        <listitem>
          <para>
            a GUI application relying on <ulink url="&blfs-svn;/x/gtk3.html">GTK-3
            </ulink> that allows tweaking settings like resolution and refresh rate
          </para>
          <indexterm zone="nvidia nvidia-settings">
            <primary sortas="b-nvidia-settings">nvidia-settings</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-smi">
        <term><command>nvidia-smi</command></term>
        <listitem>
          <para>
            provides NVIDIA GPU monitoring information
          </para>
          <indexterm zone="nvidia nvidia-smi">
            <primary sortas="b-nvidia-smi">nvidia-smi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-xconfig">
        <term><command>nvidia-xconfig</command></term>
        <listitem>
          <para>
            manipulates <application>X11</application> configuration files
            to allow the <application>NVIDIA</application> driver to be used
            when starting <application>X11</application>
          </para>
          <indexterm zone="nvidia nvidia-xconfig">
            <primary sortas="b-nvidia-xconfig">nvidia-xconfig</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcudadebugger">
        <term><filename class="libraryfile">libcudadebugger</filename></term>
        <listitem>
          <para>
            allows debugging <application>CUDA</application> applications
          </para>
          <indexterm zone="nvidia libcudadebugger">
            <primary sortas="c-libcudadebugger">libcudadebugger</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libcuda">
        <term><filename class="libraryfile">libcuda</filename></term>
        <listitem>
          <para>
            provides support for applications that use
            <application>CUDA</application>
          </para>
          <indexterm zone="nvidia libcuda">
            <primary sortas="c-libcuda">libcuda</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libEGL_nvidia">
        <term><filename class="libraryfile">libEGL_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation
            of EGL
          </para>
          <indexterm zone="nvidia libEGL_nvidia">
            <primary sortas="c-libEGL_nvidia">libEGL_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLESv2_nvidia">
        <term><filename class="libraryfile">libGLESv2_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation
            of OpenGL ES v2
          </para>
          <indexterm zone="nvidia libGLESv2_nvidia">
            <primary sortas="c-libGLESv2_nvidia">libGLESv2_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libGLX_nvidia">
        <term><filename class="libraryfile">libGLX_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation
            of GLX
          </para>
          <indexterm zone="nvidia libGLX_nvidia">
            <primary sortas="c-libGLX_nvidia">libGLX_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libglxserver_nvidia">
        <term><filename class="libraryfile">libglxserver_nvidia</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> X11 GLX extension module
          </para>
          <indexterm zone="nvidia libglxserver_nvidia">
            <primary sortas="c-libglxserver_nvidia">libglxserver_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvcuvid">
        <term><filename class="libraryfile">libnvcuvid</filename></term>
        <listitem>
          <para>
            provides an interface to hardware accelerated decoding
          </para>
          <indexterm zone="nvidia libnvcuvid">
            <primary sortas="c-libnvcuvid">libnvcuvid</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-allocator">
        <term><filename class="libraryfile">libnvidia-allocator</filename></term>
        <listitem>
          <para>
            handles NVIDIA GPU memory management
          </para>
          <indexterm zone="nvidia libnvidia-allocator">
            <primary sortas="c-libnvidia-allocator">libnvidia-allocator</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-api">
        <term><filename class="libraryfile">libnvidia-api</filename></term>
        <listitem>
          <para>
            provides the NVAPI interface
          </para>
          <indexterm zone="nvidia libnvidia-api">
            <primary sortas="c-libnvidia-api">libnvidia-api</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-cfg">
        <term><filename class="libraryfile">libnvidia-cfg</filename></term>
        <listitem>
          <para>
            queries a NVIDIA GPU's configuration settings
          </para>
          <indexterm zone="nvidia libnvidia-cfg">
            <primary sortas="c-libnvidia-cfg">libnvidia-cfg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-eglcore">
        <term><filename class="libraryfile">libnvidia-eglcore</filename></term>
        <listitem>
          <para>
            provides primary EGL functionality to other components of the
            driver
          </para>
          <indexterm zone="nvidia libnvidia-eglcore">
            <primary sortas="c-libnvidia-eglcore">libnvidia-eglcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-egl-gbm">
        <term><filename class="libraryfile">libnvidia-egl-gbm</filename></term>
        <listitem>
          <para>
            provides GBM EGL application support
          </para>
          <indexterm zone="nvidia libnvidia-egl-gbm">
            <primary sortas="c-libnvidia-egl-gbm">libnvidia-egl-gbm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-egl-wayland">
        <term><filename class="libraryfile">libnvidia-egl-wayland</filename></term>
        <listitem>
          <para>
            provides client-side <application>Wayland</application> EGL
            application support
          </para>
          <indexterm zone="nvidia libnvidia-egl-wayland">
            <primary sortas="c-libnvidia-egl-wayland">libnvidia-egl-wayland</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-egl-xcb">
        <term><filename class="libraryfile">libnvidia-egl-xcb</filename></term>
        <listitem>
          <para>
            provides EGL XCB support
          </para>
          <indexterm zone="nvidia libnvidia-egl-xcb">
            <primary sortas="c-libnvidia-egl-xcb">libnvidia-egl-xcb</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-egl-xlib">
        <term><filename class="libraryfile">libnvidia-egl-xlib</filename></term>
        <listitem>
          <para>
            provides EGL XLib support
          </para>
          <indexterm zone="nvidia libnvidia-egl-xlib">
            <primary sortas="c-libnvidia-egl-xlib">libnvidia-egl-xlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-encode">
        <term><filename class="libraryfile">libnvidia-encode</filename></term>
        <listitem>
          <para>
            provides an interface to video encoder hardware
          </para>
          <indexterm zone="nvidia libnvidia-encode">
            <primary sortas="c-libnvidia-encode">libnvidia-encode</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-fbc">
        <term><filename class="libraryfile">libnvidia-fbc</filename></term>
        <listitem>
          <para>
            provides an interface to capture and optionally encode the
            framebuffer of an <application>X11</application> server screen
          </para>
          <indexterm zone="nvidia libnvidia-fbc">
            <primary sortas="c-libnvidia-fbc">libnvidia-fbc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glcore">
        <term><filename class="libraryfile">libnvidia-glcore</filename></term>
        <listitem>
          <para>
            provides the primary OpenGL functionality for other components of
            this driver
          </para>
          <indexterm zone="nvidia libnvidia-glcore">
            <primary sortas="c-libnvidia-glcore">libnvidia-glcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glsi">
        <term><filename class="libraryfile">libnvidia-glsi</filename></term>
        <listitem>
          <para>
            provides the OpenGL Shader Interface for other components of this
            driver
          </para>
          <indexterm zone="nvidia libnvidia-glsi">
            <primary sortas="c-libnvidia-glsi">libnvidia-glsi</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-glvkspirv">
        <term><filename class="libraryfile">libnvidia-glvkspirv</filename></term>
        <listitem>
          <para>
            allows using SPIR-V shaders in OpenGL
          </para>
          <indexterm zone="nvidia libnvidia-glvkspirv">
            <primary sortas="c-libnvidia-glvkspirv">libnvidia-glvkspirv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gpucomp">
        <term><filename class="libraryfile">libnvidia-gpucomp</filename></term>
        <listitem>
          <para>
            provides primary functionality for allowing computations being done
            on the GPU for use with other components in this driver
          </para>
          <indexterm zone="nvidia libnvidia-gpucomp">
            <primary sortas="c-libnvidia-gpucomp">libnvidia-gpucomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gtk2">
        <term><filename class="libraryfile">libnvidia-gtk2</filename></term>
        <listitem>
          <para>
            for <command>nvidia-settings</command>; utilizes
            <application>GTK-2</application>
          </para>
          <indexterm zone="nvidia libnvidia-gtk2">
            <primary sortas="c-libnvidia-gtk2">libnvidia-gtk2</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-gtk3">
        <term><filename class="libraryfile">libnvidia-gtk3</filename></term>
        <listitem>
          <para>
            for <command>nvidia-settings</command>; utilizes
            <application>GTK-3</application>
          </para>
          <indexterm zone="nvidia libnvidia-gtk3">
            <primary sortas="c-liblnvidia-gtk3">libnvidia-gtk3</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ml">
        <term><filename class="libraryfile">libnvidia-ml</filename></term>
        <listitem>
          <para>
            provides a monitoring and management API
          </para>
          <indexterm zone="nvidia libnvidia-ml">
            <primary sortas="c-libnvidia-ml">libnvidia-ml</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ngx">
        <term><filename class="libraryfile">libnvidia-ngx</filename></term>
        <listitem>
          <para>
            provides functions for DLSS support
          </para>
          <indexterm zone="nvidia libnvidia-ngx">
            <primary sortas="c-libnvidia-ngx">libnvidia-ngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-nvvm">
        <term><filename class="libraryfile">libnvidia-nvvm</filename></term>
        <listitem>
          <para>
            provides JIT LTO for CUDA
          </para>
          <indexterm zone="nvidia libnvidia-nvvm">
            <primary sortas="c-libnvidia-nvvm">libnvidia-nvvm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-opencl">
        <term><filename class="libraryfile">libnvidia-opencl</filename></term>
        <listitem>
          <para>
            provides <application>NVIDIA</application>'s implementation of
            the OpenCL API standard
          </para>
          <indexterm zone="nvidia libnvidia-opencl">
            <primary sortas="c-libnvidia-opencl">libnvidia-opencl</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-pkcs11">
        <term><filename class="libraryfile">libnvidia-pkcs11</filename></term>
        <listitem>
          <para>
            provides cryptography functions when the driver is operating in
            Confidential Compute mode
          </para>
          <indexterm zone="nvidia libnvidia-pkcs11">
            <primary sortas="c-libnvidia-pkcs11">libnvidia-pkcs11</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-ptxjitcompiler">
        <term><filename class="libraryfile">libnvidia-ptxjitcompiler</filename></term>
        <listitem>
          <para>
            is a JIT compiler which compiles PTX into GPU machine code;
            used by CUDA
          </para>
          <indexterm zone="nvidia libnvidia-ptxjitcompiler">
            <primary sortas="c-libnvidia-ptxjitcompiler">libnvidia-ptxjitcompiler</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-rtcore">
        <term><filename class="libraryfile">libnvidia-rtcore</filename></term>
        <listitem>
          <para>
            implements the RT (Ray Tracing) core functionality and is used by
            other components in this driver
          </para>
          <indexterm zone="nvidia libnvidia-rtcore">
            <primary sortas="c-libnvidia-rtcore">libnvidia-rtcore</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-tls">
        <term><filename class="libraryfile">libnvidia-tls</filename></term>
        <listitem>
          <para>
            provides TLS support for the <application>NVIDIA
            </application> OpenGL implementations
          </para>
          <indexterm zone="nvidia libnvidia-tls">
            <primary sortas="c-libnvidia-tls">libnvidia-tls</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libnvidia-wayland-client">
        <term><filename class="libraryfile">libnvidia-wayland-client</filename></term>
        <listitem>
          <para>
            is required for <command>nvidia-settings</command> on
            <application>Wayland</application>
          </para>
          <indexterm zone="nvidia libnvidia-wayland-client">
            <primary sortas="c-libnvidia-wayland-client">libnvidia-wayland-client</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libvdpau_nvidia">
        <term><filename class="libraryfile">libvdpau_nvidia</filename></term>
        <listitem>
          <para>
            provides the <application>NVIDIA</application> implementation for
            the VDPAU API
          </para>
          <indexterm zone="nvidia libvdpau_nvidia">
            <primary sortas="c-libvdpau_nvidia">libvdpau_nvidia</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="_nvngx">
        <term><filename class="libraryfile">_nvngx</filename></term>
        <listitem>
          <para>
            provides DLSS support for use with <application>Wine</application>
          </para>
          <indexterm zone="nvidia _nvngx">
            <primary sortas="c-_nvngx">_nvngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvngx">
        <term><filename class="libraryfile">nvngx</filename></term>
        <listitem>
          <para>
            provides DLSS support for use with Proton
          </para>
          <indexterm zone="nvidia nvngx">
            <primary sortas="c-nvngx">nvngx</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvngx_dlssg">
        <term><filename class="libraryfile">nvngx_dlssg</filename></term>
        <listitem>
          <para>
            is the DLSS 3 Frame Generation library
          </para>
          <indexterm zone="nvidia nvngx_dlssg">
            <primary sortas="c-nvngx_dlssg">nvngx_dlssg</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia-drm_gbm">
        <term><filename class="libraryfile">nvidia-drm_gbm</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> GBM driver
          </para>
          <indexterm zone="nvidia nvidia-drm_gbm">
            <primary sortas="c-nvidia-drm_gbm">nvidia-drm_gbm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="nvidia_drv">
        <term><filename class="libraryfile">nvidia_drv</filename></term>
        <listitem>
          <para>
            is the <application>NVIDIA</application> <application>X11
            </application> driver
          </para>
          <indexterm zone="nvidia nvidia_drv">
            <primary sortas="c-nvidia_drv">nvidia_drv</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
